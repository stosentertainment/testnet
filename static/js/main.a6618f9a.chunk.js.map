{"version":3,"sources":["state/stos/index.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","utils/translateTextHelpers.ts","hooks/useI18n.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","config/constants/contracts.ts","contexts/BlockContext.tsx","utils/multicall.ts","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","config/constants/nfts.ts","views/Nft/components/NftGlobalNotification.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx","state/hooks.ts","utils/web3.ts","contexts/Localisation/translationsContext.ts","state/actions.ts","hooks/useRefresh.ts"],"names":["stosSlice","createSlice","name","initialState","data","price","totalSupply","reducers","setPriceData","state","action","priceData","payload","setTotalSupplyData","totalSupplyData","actions","fetchPriceDataAsync","dispatch","a","STOSValue","fetch","then","res","json","result","status","error","catch","fetchTotalSupplyDataAsync","totalSupplyValue","fetchFarms","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","eggPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","farmsSlice","setFarmsPublicData","liveFarmsData","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","fetchFarmsPublicDataAsync","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","nodes","process","getNodeUrl","randomIndex","random","length","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","Provider","value","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","PoolCategory","cake","56","97","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getWeb3","eth","getBlockNumber","blockNumber","current","abi","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","i","decodeFunctionResult","getCakeAddress","addresses","chainId","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","pools","nonBnbPools","poolsConfig","filter","p","stakingTokenName","BNB","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingEgg","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","setTranslations","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","r","translationApiResponse","e","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","setIsDark","prevState","JSON","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","useSTOSPrice","login","logout","currentLang","langs","setLang","cakePriceUsd","links","Wrapper","PageLoader","RABBIT_MINTING_FARM_ADDRESS","ModalContent","Actions","NftYouWonModal","onDismiss","TranslateString","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","showModal","checkNftStatus","rabbitmintingfarm","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","document","location","Home","lazy","Farms","Pools","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","useFetchPublicData","useFetchPriceData","useFetchTotalSupplyData","Global","path","exact","tokenMode","component","memo","configureStore","devTools","reducer","farmsReducer","poolsReducer","stos","stosReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","getElementById","ZERO","useDispatch","slowRefresh","useRefresh","useFarms","useSelector","useFarmFromPid","useFarmUser","usePools","fastRefresh","usePriceBnbBusd","usePriceCakeBusd","useTotalSupplyPrice","useTotalValue","bnbPrice","cakePrice","val","CAKE","plus","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","defaultTranslationState"],"mappings":"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","file":"static/js/main.a6618f9a.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport { StosState } from '../types'\n\nconst initialState: StosState = { data: { price: 0, totalSupply: 0 } }\n\nexport const stosSlice = createSlice({\n  name: 'Stos',\n  initialState,\n  reducers: {\n    setPriceData: (state, action) => {\n      const priceData = action.payload\n      return { data: {...state.data, price: priceData } };\n    },\n    setTotalSupplyData: (state, action) => {\n      const totalSupplyData = action.payload\n      return {  data: {...state.data, totalSupply: totalSupplyData } };\n    }\n  },\n})\n\n// Actions\nexport const { setPriceData, setTotalSupplyData } = stosSlice.actions\n\n// Thunks\nexport const fetchPriceDataAsync = () => async (dispatch) => {\n\nlet STOSValue = 0;\nawait fetch(\n  'https://api.stosentertainment.com/price-bnbpool.php?key=236547643&pool=0xe0e3f3698ba35487e5285fdfd31a5b8d8f564d8b&token=0x9eab0a93b0cd5d904493694f041bdcedb97b88c6&decimals=18',\n)\n  .then((res) => res.json())\n  .then(\n    (result) => {\n      if (result.status === true) {\n        STOSValue = (result.data)\n      } else {\n        STOSValue = 0;\n      }\n    },\n    (error) => {\n      STOSValue = 0;\n    },\n  )\n  .catch(() => {\n    STOSValue = 0;\n  })\n  dispatch(setPriceData(STOSValue))\n}\n\nexport const fetchTotalSupplyDataAsync = () => async (dispatch) => {\n\n  let totalSupplyValue = 0;\n  await fetch(\n    'https://api.bscscan.com/api?module=stats&action=tokenCsupply&contractaddress=0x9eab0a93b0cd5d904493694f041bdcedb97b88c6&apikey=5E61V2DWBJANXNURC6Q991F828E6W5KX1P&decimals=18',\n  )\n    .then((res) => res.json())\n    .then(\n      (result) => {\n        if (result.status === \"1\") {\n          totalSupplyValue = (result.result / (10 ** 18))\n        } else {\n          totalSupplyValue = 0;\n        }\n      },\n      (error) => {\n        totalSupplyValue = 0;\n      },\n    )\n    .catch(() => {\n      totalSupplyValue = 0;\n    })\n    dispatch(setTotalSupplyData(totalSupplyValue))\n  }\n\n\nexport default stosSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals,\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      let tokenPriceVsQuote\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n      }\n\n      const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'eggPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingEgg',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData, } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","export default {\n  cake: {\n    56: '0xF952Fc3ca7325Cc27D15885d37117676d25BfdA6',\n    97: '',\n  },\n  masterChef: {\n    56: '0xe70E9185F5ea7Ba3C5d63705784D8563017f2E57',\n    97: '',\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n  },\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingEgg('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'STOS-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\n    },\n    tokenSymbol: 'STOS',\n    tokenAddresses: {\n      97: '',\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'STOS-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0xd1b59d11316e87c3a0a069e80f590ba35cd8d8d3',\n    },\n    tokenSymbol: 'STOS',\n    tokenAddresses: {\n      97: '',\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: 'BNB-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 3,\n    risk: 1,\n    lpSymbol: 'USDT-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd',\n    },\n    tokenSymbol: 'USDT',\n    tokenAddresses: {\n      97: '',\n      56: '0x55d398326f99059ff775485246999027b3197955',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 4,\n    risk: 2,\n    lpSymbol: 'BTCB-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0x7561eee90e24f3b348e1087a005f78b4c8453524',\n    },\n    tokenSymbol: 'BTCB',\n    tokenAddresses: {\n      97: '',\n      56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 5,\n    risk: 2,\n    lpSymbol: 'ETH-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0x70d8929d04b60af4fb9b58713ebcf18765ade422',\n    },\n    tokenSymbol: 'ETH',\n    tokenAddresses: {\n      97: '',\n      56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 6,\n    risk: 1,\n    lpSymbol: 'DAI-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x3ab77e40340ab084c3e23be8e5a6f7afed9d41dc',\n    },\n    tokenSymbol: 'DAI',\n    tokenAddresses: {\n      97: '',\n      56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 7,\n    risk: 1,\n    lpSymbol: 'USDC-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x680dd100e4b394bda26a59dd5c119a391e747d18',\n    },\n    tokenSymbol: 'USDC',\n    tokenAddresses: {\n      97: '',\n      56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 9,\n    risk: 3,\n    lpSymbol: 'DOT-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0xbcd62661a6b1ded703585d3af7d7649ef4dcdb5c',\n    },\n    tokenSymbol: 'DOT',\n    tokenAddresses: {\n      97: '',\n      56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 10,\n    risk: 4,\n    lpSymbol: 'CAKE-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458',\n    },\n    tokenSymbol: 'CAKE',\n    tokenAddresses: {\n      97: '',\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 11,\n    risk: 4,\n    lpSymbol: 'CAKE-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0xa527a61703d82139f8a06bc30097cc9caa2df5a6',\n    },\n    tokenSymbol: 'CAKE',\n    tokenAddresses: {\n      97: '',\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 12,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'STOS',\n    lpAddresses: {\n      97: '',\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // STOS-BUSD LP\n    },\n    tokenSymbol: 'STOS',\n    tokenAddresses: {\n      97: '',\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 13,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'BUSD',\n    lpAddresses: {\n      97: '',\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // STOS-BUSD LP (BUSD-BUSD will ignore)\n    },\n    tokenSymbol: 'BUSD',\n    tokenAddresses: {\n      97: '',\n      56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 14,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'WBNB',\n    lpAddresses: {\n      97: '',\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\n    },\n    tokenSymbol: 'WBNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 15,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'USDT',\n    lpAddresses: {\n      97: '',\n      56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd', // USDT-BUSD LP\n    },\n    tokenSymbol: 'USDT',\n    tokenAddresses: {\n      97: '',\n      56: '0x55d398326f99059ff775485246999027b3197955',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 16,\n    risk: 2,\n    isTokenOnly: true,\n    lpSymbol: 'BTCB',\n    lpAddresses: {\n      97: '',\n      56: '0xb8875e207ee8096a929d543c9981c9586992eacb', // BTCB-BUSD LP\n    },\n    tokenSymbol: 'BTCB',\n    tokenAddresses: {\n      97: '',\n      56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 17,\n    risk: 2,\n    isTokenOnly: true,\n    lpSymbol: 'ETH',\n    lpAddresses: {\n      97: '',\n      56: '0xd9a0d1f5e02de2403f68bb71a15f8847a854b494', // ETH-BUSD LP\n    },\n    tokenSymbol: 'ETH',\n    tokenAddresses: {\n      97: '',\n      56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 18,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'DAI',\n    lpAddresses: {\n      97: '',\n      56: '0x3ab77e40340ab084c3e23be8e5a6f7afed9d41dc', // DAI-BUSD LP\n    },\n    tokenSymbol: 'DAI',\n    tokenAddresses: {\n      97: '',\n      56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 19,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'USDC',\n    lpAddresses: {\n      97: '',\n      56: '0x680dd100e4b394bda26a59dd5c119a391e747d18', // USDC-BUSD LP\n    },\n    tokenSymbol: 'USDC',\n    tokenAddresses: {\n      97: '',\n      56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 20,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'DOT',\n    lpAddresses: {\n      97: '',\n      56: '0x54c1ec2f543966953f2f7564692606ea7d5a184e', // DOT-BUSD LP\n    },\n    tokenSymbol: 'DOT',\n    tokenAddresses: {\n      97: '',\n      56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 21,\n    risk: 4,\n    isTokenOnly: true,\n    lpSymbol: 'CAKE',\n    lpAddresses: {\n      97: '',\n      56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\n    },\n    tokenSymbol: 'CAKE',\n    tokenAddresses: {\n      97: '',\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 22,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'BSCX',\n    lpAddresses: {\n      97: '',\n      56: '0xa32a983a64ce21834221aa0ad1f1533907553136', // BSCX-BUSD LP\n    },\n    tokenSymbol: 'BSCX',\n    tokenAddresses: {\n      97: '',\n      56: '0x5ac52ee5b2a633895292ff6d8a89bb9190451587',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 23,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'AUTO',\n    lpAddresses: {\n      97: '',\n      56: '0x4d0228ebeb39f6d2f29ba528e2d15fc9121ead56', // AUTO-BNB LP\n    },\n    tokenSymbol: 'AUTO',\n    tokenAddresses: {\n      97: '',\n      56: '0xa184088a740c695e156f91f5cc086a06bb78b827',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Actor', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    return true\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Buy SafeSTOS',\n        href: 'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://exchange.pancakeswap.finance/#/pool',\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'Pools',\n    icon: 'PoolIcon',\n    href: '/pools',\n  },\n  // {\n  //   label: 'Lottery',\n  //   icon: 'TicketIcon',\n  //   href: '/lottery',\n  // },\n  // {\n  //   label: 'NFT',\n  //   icon: 'NftIcon',\n  //   href: '/nft',\n  // },\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'Bscscan',\n        href: 'https://bscscan.com/token/0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\n      },\n      {\n        label: 'Chart',\n        href: 'https://charts.bogged.finance/?token=0x9eAB0a93b0cd5d904493694F041BdCedb97b88C6',\n      },\n      {\n        label: 'Coingecko Coming Soon',\n        href: '#',\n      },\n      {\n        label: 'CoinMarketCap Coming Soon',\n        href: '#',\n      },\n    ],\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Github',\n        href: 'https://github.com/stosent/',\n      },\n      {\n        label: 'Medium',\n        href: 'https://stos-entertainment-co.medium.com/',\n      },\n    ],\n  },\n  {\n    label: 'Audits Coming Soon',\n    icon: 'AuditIcon',\n    href: '#',\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { useSTOSPrice } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\nimport './style.css'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const STOSValue = useSTOSPrice();\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={STOSValue.toNumber()}\n      links={config}\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import { Nft } from './types'\n\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Swapsies',\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\n    previewImage: 'swapsies-preview.png',\n    blurImage: 'swapsies-blur.png',\n    sortOrder: 999,\n    bunnyId: 0,\n  },\n  {\n    name: 'Drizzle',\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\n    previewImage: 'drizzle-preview.png',\n    blurImage: 'drizzle-blur.png',\n    sortOrder: 999,\n    bunnyId: 1,\n  },\n  {\n    name: 'Blueberries',\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\n    previewImage: 'blueberries-preview.png',\n    blurImage: 'blueberries-blur.png',\n    sortOrder: 999,\n    bunnyId: 2,\n  },\n  {\n    name: 'Circular',\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\n    previewImage: 'circular-preview.png',\n    blurImage: 'circular-blur.png',\n    sortOrder: 999,\n    bunnyId: 3,\n  },\n  {\n    name: 'Sparkle',\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\n    previewImage: 'sparkle-preview.png',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 4,\n  },\n]\n\nexport default Nfts\n","import React, { useEffect, useRef } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\n\ninterface NftYouWonModalProps {\n  onDismiss?: () => void\n}\n\nconst ModalContent = styled.div`\n  padding: 24px;\n  text-align: center;\n`\n\nconst Actions = styled.div`\n  text-align: center;\n`\n\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n  return (\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\n      <ModalContent>\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\n        <Heading size=\"lg\" color=\"secondary\">\n          {TranslateString(999, 'You won an NFT!')}\n        </Heading>\n      </ModalContent>\n      <Actions>\n        <Button as=\"a\" href=\"/nft\">\n          {TranslateString(999, 'Go to claim NFT')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\n/**\n * 1. Checks if nft supply available\n * 2. If supply is available check if the user can claim\n * 3. If the user can claim show a modal\n */\nconst NftGlobalNotification = () => {\n  const { account } = useWallet()\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\n  const showModal = useRef(() => onPresentBurnModal())\n\n  useEffect(() => {\n    const checkNftStatus = async () => {\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\n        rabbitmintingfarm,\n        [\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\n        ],\n      )\n\n      // TODO: Figure out why these values are coming back as an array\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n      const [canClaim]: [boolean] = canClaimArr\n      const [hasClaimed]: [boolean] = hasClaimedArr\n\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\n        showModal.current()\n      }\n    }\n\n    if (account && !document.location.href.includes('/nft')) {\n      checkNftStatus()\n    }\n  }, [account, showModal])\n\n  return <div />\n}\n\nexport default NftGlobalNotification\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData, useFetchPriceData, useFetchTotalSupplyData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\nconst Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  useFetchPriceData()\n\n  useFetchTotalSupplyData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/nests\">\n              <Farms tokenMode />\n            </Route>\n            <Route path=\"/pools\">\n              <Pools />\n            </Route>\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n\n      <NftGlobalNotification />\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\nimport stosReducer from './stos'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n    stos: stosReducer\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, fetchPriceDataAsync, fetchTotalSupplyDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// For Price\nexport const useFetchPriceData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchPriceDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// For Total Supply\nexport const useFetchTotalSupplyData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchTotalSupplyDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0 // STOS-BUSD LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useSTOSPrice = (): BigNumber => {\n  const { price } = useSelector((state: State) => state.stos.data)\n  return price ? new BigNumber(price) : ZERO\n}\n\nexport const useTotalSupplyPrice = (): BigNumber => {\n  const { totalSupply } = useSelector((state: State) => state.stos.data)\n  return totalSupply ? new BigNumber(totalSupply) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport { fetchPriceDataAsync, fetchTotalSupplyDataAsync } from './stos'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n"],"sourceRoot":""}