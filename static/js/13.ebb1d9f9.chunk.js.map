{"version":3,"sources":["utils/formatBalance.ts","utils/callHelpers.ts","config/index.ts","components/UnlockButton.tsx","hooks/useApprove.ts","views/Nft/components/InfoRow.tsx","views/Nft/components/Image.tsx","views/Nft/utils/contracts.ts","views/Nft/contexts/NftProvider.tsx","utils/erc20.ts","hooks/useTokenBalance.ts","views/Nft/components/ClaimNftModal.tsx","hooks/useAllowance.ts","views/Nft/components/BurnNftModal.tsx","views/Nft/components/TransferNftModal.tsx","views/Nft/components/NftCard/index.tsx","views/Nft/components/NftGrid.tsx","views/Nft/components/NftList.tsx","utils/getTimePeriods.ts","utils/formatTimePeriod.ts","views/Nft/components/NftProgress.tsx","views/Nft/components/NftProgressSimple.tsx","views/Nft/components/SecondaryCard.tsx","views/Nft/components/CardContent.tsx","views/Nft/components/NoNftsToClaimCard.tsx","views/Nft/components/YouWonCard.tsx","views/Nft/components/NftInWalletCard.tsx","views/Nft/components/StatusCard.tsx","views/Nft/components/NftInfo.tsx","views/Nft/index.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","config","EXPONENTIAL_AT","DECIMAL_PLACES","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","UnlockButton","props","TranslateString","useI18n","useWallet","connect","reset","onPresentConnectModal","useWalletModal","onClick","useSousApprove","sousId","dispatch","useDispatch","useSousChef","onApprove","useCallback","updateUserAllowance","useNftApprove","tokenContract","spenderAddress","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getContract","NFT","getFromWayArray","v","array","t","length","i","push","fromWei","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","currentBlock","useBlock","useEffect","multicall","nftFarm","NftFarm","name","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","console","error","fetchContractData","nftContract","params","getMinted","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","nftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","getTokenIds","reInitialize","provider","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","useTokenBalance","setBalance","ethereum","fastRefresh","useRefresh","res","fetchBalance","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","getCakeAddress","allowance","dependency","setAllowance","log","fetch","useNftAllowance","cakeBalance","cakeInWallet","handleConfirm","mintNFT","title","tokenAmount","color","mb","fullWidth","disabled","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","AMOUNT_TO_CLAIM","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","ViewNft","NftCard","isOpen","nftCount","nftBurnCount","useContext","history","useHistory","originalImage","description","tokenSupply","loggedIn","nftIndex","indexOf","MINTS","MINTED","MAX_MINT","walletCanClaim","undefined","isSupplyAvailable","walletOwnsNft","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","timeLeft","years","months","days","hours","minutes","Math","floor","formatTimePeriod","periods","excludePeriods","textArr","Object","keys","forEach","period","includes","substr","join","Heading","UIKitLink","textSubtle","NftProgress","secondsRemaining","NftProgressSimple","SecondaryCard","textDisabled","Content","StyledCardContent","CardContent","imgSrc","NoNftsToClaimCard","YouWonCard","NftInWalletCard","StatusCard","StyledNtfInfo","NftInfo","StyledHero","Nft","Page","size"],"mappings":"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","file":"static/js/13.ebb1d9f9.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an NFT\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport { NftFarm } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(nftFarm, [\n          { address: NftFarm, name: 'startBlockNumber' },\n          { address: NftFarm, name: 'endBlockNumber' },\n          { address: NftFarm, name: 'countBurnt' },\n          { address: NftFarm, name: 'totalSupplyDistributed' },\n          { address: NftFarm, name: 'currentDistributedSupply' },\n          { address: NftFarm, name: 'allowMultipleClaims' },\n          { address: NftFarm, name: 'rarity' },\n          { address: NftFarm, name: 'priceMultiplier' },\n          { address: NftFarm, name: 'maxMintPerNft' },\n          { address: NftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        // console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    const fetchNonLoggedInContractData = async () => {\n      try {\n        const getMinted = await multicall(nftFarm, [\n          { address: NftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\n        ])\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          amounts,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    } else {\n      fetchNonLoggedInContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n  const contraToken = useERC20(getCakeAddress())\n  const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, NftFarm)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have STOS balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} STOS`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n// Retrieve NFT allowance\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.log(e.toString())\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} STOS</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive STOS, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/nfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { useHistory } from 'react-router-dom'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 44px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ViewNft = styled(Text)`\n  @media (max-width: 1300px) {\n    font-size: 11px;\n  }\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n  const history = useHistory()\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  const { nftId, name, previewImage, originalImage, description, tokenAmount, tokenSupply } = nft\n  const PRICE = prices[nftId] || tokenPerBurn // here we get the price\n\n  const loggedIn = account !== null\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  const MINTS = myMints[nftIndex] || 0\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && !walletCanClaim && (\n            <Tag outline variant=\"failure\">\n              Sold Out\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {tokenAmount} STOS\n          </Button>\n        )}\n        {isInitialized && (\n          <Button fullWidth onClick={() => history.push(`detail/${nftId}`)} mt=\"24px\">\n            <ViewNft>\n              View NFT ({MINTED}/{tokenSupply} MINTED)\n            </ViewNft>\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for STOS')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>\n                {MINTED}/{tokenSupply}\n              </Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Owned By Me')}:</Text>\n              <Value>{MINTS}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = seconds\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import getTimePeriods from './getTimePeriods'\n\n/**\n * @param {Object} periods Return value from getTimePeriods\n * @return {string} '14h 3m 4s'\n */\nconst formatTimePeriod = (periods: ReturnType<typeof getTimePeriods>, excludePeriods = []) => {\n  const textArr = []\n\n  Object.keys(periods).forEach((period) => {\n    if (periods[period] > 0 && !excludePeriods.includes(period)) {\n      textArr.push(`${periods[period]}${period.substr(0, 1)}`)\n    }\n  })\n\n  if (textArr.length === 0) {\n    return null\n  }\n\n  return textArr.join(' ')\n}\n\nexport default formatTimePeriod\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, OpenNewIcon, Text, Link as UIKitLink, Progress } from '@pancakeswap-libs/uikit'\nimport { BSC_BLOCK_TIME } from 'config'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport formatTimePeriod from 'utils/formatTimePeriod'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst TimeLeft = styled(Heading)`\n  margin-bottom: 16px;\n  text-align: center;\n`\n\nconst Link = styled(UIKitLink)`\n  text-decoration: underline;\n`\n\nconst Message = styled.p`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n  padding-top: 16px;\n  text-align: center;\n`\n\nconst ProgressWrap = styled.div`\n  margin-bottom: 16px;\n`\n\nconst NftProgress = () => {\n  const {\n    isInitialized,\n    currentDistributedSupply,\n    totalSupplyDistributed,\n    countBurnt,\n    startBlockNumber,\n    endBlockNumber,\n  } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n  const currentBlock = useBlock()\n  const secondsRemaining = (endBlockNumber - currentBlock) * BSC_BLOCK_TIME\n\n  const timeLeft = formatTimePeriod(getTimePeriods(secondsRemaining), ['seconds'])\n  const totalBlocks = endBlockNumber - startBlockNumber\n  const progress = currentBlock > startBlockNumber ? ((currentBlock - startBlockNumber) / totalBlocks) * 100 : 5\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgress\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, 'Total Base and Rare NFTs Claimed')}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import styled from 'styled-components'\n\nconst SecondaryCard = styled.div`\n  align-items: start;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 32px;\n  display: flex;\n  padding: 24px;\n`\n\nexport default SecondaryCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Image = styled.img`\n  margin-right: 16px;\n  width: 56px;\n`\n\nconst Content = styled.div`\n  flex: 1;\n`\n\nconst StyledCardContent = styled.div`\n  align-items: start;\n  display: flex;\n`\n\nconst CardContent = ({ imgSrc, children }) => {\n  return (\n    <StyledCardContent>\n      <Image src={imgSrc} alt=\"card icon\" />\n      <Content>{children}</Content>\n    </StyledCardContent>\n  )\n}\n\nexport default CardContent\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport SecondaryCard from './SecondaryCard'\nimport CardContent from './CardContent'\n\nconst NoNftsToClaimCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <SecondaryCard>\n      <CardContent imgSrc=\"/images/present-disabled.svg\">\n        <Heading mb=\"8px\">{TranslateString(999, 'No NFTs to claim')}</Heading>\n        <Text>\n          {TranslateString(\n            999,\n            'You have no NFTs to claim at this time, but you can still see the NFTs in this series below.',\n          )}\n        </Text>\n      </CardContent>\n    </SecondaryCard>\n  )\n}\n\nexport default NoNftsToClaimCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst YouWonCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'NFTs Avaiable!')}</Heading>\n          <Text>{TranslateString(999, 'Claim an NFT from the options below!')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default YouWonCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst NftInWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'NFT in wallet')}</Heading>\n          <Text>{TranslateString(999, 'Trade in your NFT for STOS, or just keep it for your collection.')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftInWalletCard\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NoNftsToClaimCard from './NoNftsToClaimCard'\nimport YouWonCard from './YouWonCard'\nimport NftInWalletCard from './NftInWalletCard'\n\n/**\n * Possible states\n *\n * 1. Disconnected wallet\n * 2. No NFT's to claim\n * 3. You won an NFT\n * 4. NFT in wallet\n */\nconst StatusCard = () => {\n  const { account } = useWallet()\n  const { isInitialized, hasClaimed, balanceOf } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n\n  if (!account) {\n    return (\n      <Card isActive>\n        <CardBody>\n          <Heading mb=\"8px\">{TranslateString(999, 'Wallet Disconnected')}</Heading>\n          <Text mb=\"16px\">{TranslateString(999, 'Connect to see if you have won an NFT!')}</Text>\n          <UnlockButton />\n        </CardBody>\n      </Card>\n    )\n  }\n\n  if (!isInitialized) {\n    return <Text>...</Text>\n  }\n\n  if (!hasClaimed) {\n    return <YouWonCard />\n  }\n\n  if (balanceOf > 0) {\n    return <NftInWalletCard />\n  }\n\n  return <NoNftsToClaimCard />\n}\n\nexport default StatusCard\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  if (!canBurnNft) {\n    return <NftProgressSimple />\n  }\n\n  return (\n    <StyledNtfInfo>\n      <NftProgress />\n      <StatusCard />\n    </StyledNtfInfo>\n  )\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n            Base and Rare NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"secondary\">\n            {TranslateString(999, 'Trade in for STOS, or keep for your collection!')}\n          </Heading>\n        </StyledHero>\n        <NftInfo />\n        <NftList />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}