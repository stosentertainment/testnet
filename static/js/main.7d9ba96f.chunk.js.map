{"version":3,"sources":["state/stos/index.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/index.ts","state/prices/index.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","contexts/BlockContext.tsx","utils/multicall.ts","utils/addressHelpers.ts","config/constants/contracts.ts","config/constants/pools.ts","state/pools/fetchPools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","Providers.tsx","index.tsx","state/actions.ts","hooks/useRefresh.ts","state/hooks.ts","utils/web3.ts"],"names":["stosSlice","createSlice","name","initialState","data","price","totalSupply","reducers","setPriceData","state","action","priceData","payload","setTotalSupplyData","totalSupplyData","actions","fetchPriceDataAsync","dispatch","a","STOSValue","fetch","then","res","json","result","status","error","catch","fetchTotalSupplyDataAsync","totalSupplyValue","fetchFarms","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","lifePerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","farmsSlice","setFarmsPublicData","liveFarmsData","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","fetchFarmsPublicDataAsync","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","nodes","process","getNodeUrl","randomIndex","random","length","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","Provider","value","store","configureStore","devTools","reducer","farmsReducer","pools","poolsReducer","stos","stosReducer","prices","pricesReducer","useAppDispatch","useDispatch","fetchPrices","createAsyncThunk","response","updated_at","Object","keys","reduce","accum","token","toLowerCase","parseFloat","pricesSlice","isLoading","lastUpdated","extraReducers","builder","addCase","pending","fulfilled","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","PoolCategory","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getWeb3","eth","getBlockNumber","blockNumber","current","abi","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","encodeFunctionData","methods","aggregate","returnData","i","decodeFunctionResult","getCakeAddress","addresses","cake","chainId","masterChef","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","56","97","busd","sousId","tokenName","stakingTokenName","STOS","earningToken","stakingTokenAddress","contractAddress","poolCategory","COMMUNITY","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","contracts","STOSBNB","fetchPoolsBlockLimits","poolsWithEnd","poolsConfig","filter","p","callsStartBlock","poolConfig","callsEndBlock","sousChefABI","starts","ends","cakePoolConfig","startBlock","endBlock","fetchPoolsTotalStatking","nonBnbPools","BNB","bnbPool","callsNonBnbPools","callsBnbPools","cakeABI","nonBnbPoolsTotalStaked","wbnbABI","bnbPoolsTotalStaked","totalStaked","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingLife","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsPublicDataAsync","blockLimits","totalStakings","liveData","blockLimit","totalStaking","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","r","translationApiResponse","e","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","setIsDark","prevState","JSON","stringify","dark","light","useTheme","useContext","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","useSTOSPrice","login","logout","currentLang","langs","setLang","cakePriceUsd","links","backgroundVideo","Wrapper","PageLoader","Home","lazy","Pools","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","useFetchPublicData","useFetchPriceData","useFetchTotalSupplyData","Global","fallback","path","exact","component","memo","Providers","rpcUrl","getRpcUrl","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","useRefresh","fastRefresh","slowRefresh","ZERO","useFarms","useSelector","useFarmFromPid","usePools","usePriceBnbBusd","useTotalSupplyPrice","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout"],"mappings":"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","file":"static/js/main.7d9ba96f.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport { StosState } from '../types'\n\nconst initialState: StosState = { data: { price: 0, totalSupply: 0 } }\n\nexport const stosSlice = createSlice({\n  name: 'Stos',\n  initialState,\n  reducers: {\n    setPriceData: (state, action) => {\n      const priceData = action.payload\n      return { data: { ...state.data, price: priceData } }\n    },\n    setTotalSupplyData: (state, action) => {\n      const totalSupplyData = action.payload\n      return { data: { ...state.data, totalSupply: totalSupplyData } }\n    },\n  },\n})\n\n// Actions\nexport const { setPriceData, setTotalSupplyData } = stosSlice.actions\n\n// Thunks\nexport const fetchPriceDataAsync = () => async (dispatch) => {\n  let STOSValue = 0\n  await fetch(\n    'https://api.stosentertainment.com/price-bnbpool.php?key=236547643&pool=0xe0e3f3698ba35487e5285fdfd31a5b8d8f564d8b&token=0x9eab0a93b0cd5d904493694f041bdcedb97b88c6&decimals=18',\n  )\n    .then((res) => res.json())\n    .then(\n      (result) => {\n        if (result.status === true) {\n          STOSValue = result.data\n        } else {\n          STOSValue = 0\n        }\n      },\n      (error) => {\n        STOSValue = 0\n      },\n    )\n    .catch(() => {\n      STOSValue = 0\n    })\n  dispatch(setPriceData(STOSValue))\n}\n\nexport const fetchTotalSupplyDataAsync = () => async (dispatch) => {\n  let totalSupplyValue = 0\n  await fetch(\n    'https://api.bscscan.com/api?module=stats&action=tokenCsupply&contractaddress=0x9eab0a93b0cd5d904493694f041bdcedb97b88c6&apikey=5E61V2DWBJANXNURC6Q991F828E6W5KX1P&decimals=18',\n  )\n    .then((res) => res.json())\n    .then(\n      (result) => {\n        if (result.status === '1') {\n          totalSupplyValue = result.result / 10 ** 18\n        } else {\n          totalSupplyValue = 0\n        }\n      },\n      (error) => {\n        totalSupplyValue = 0\n      },\n    )\n    .catch(() => {\n      totalSupplyValue = 0\n    })\n  dispatch(setTotalSupplyData(totalSupplyValue))\n}\n\nexport default stosSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\n// const web3 = require('web3');\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals,\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      let tokenPriceVsQuote\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n      }\n\n      const [info, totalAllocPoint, lifePerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'lifePerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        lifePerBlock: new BigNumber(lifePerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingLife',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\nimport pricesReducer from './prices'\nimport stosReducer from './stos'\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n    stos: stosReducer,\n    prices: pricesReducer,\n  },\n})\n\n/**\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\n */\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport default store\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { PriceApiResponse, PriceApiThunk, PriceState } from 'state/types'\n\nconst initialState: PriceState = {\n  isLoading: false,\n  lastUpdated: null,\n  data: null,\n}\n\n// Thunks\nexport const fetchPrices = createAsyncThunk<PriceApiThunk>('prices/fetch', async () => {\n  const response = await fetch('https://api.pancakeswap.info/api/v2/tokens')\n  const data = (await response.json()) as PriceApiResponse\n  // Return normalized token names\n  return {\n    updated_at: data.updated_at,\n    data: Object.keys(data.data).reduce((accum, token) => {\n      return {\n        ...accum,\n        [token.toLowerCase()]: parseFloat(data.data[token].price),\n      }\n    }, {}),\n  }\n})\n\nexport const pricesSlice = createSlice({\n  name: 'prices',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchPrices.pending, (state) => {\n      state.isLoading = true\n    })\n    builder.addCase(fetchPrices.fulfilled, (state, action: PayloadAction<PriceApiThunk>) => {\n      state.isLoading = false\n      state.lastUpdated = action.payload.updated_at\n      state.data = action.payload.data\n    })\n  },\n})\n\nexport default pricesSlice.reducer\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'STOS' = 'STOS',\n  'STOSBNB' = 'STOS-BNB',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  earningToken?: string\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n  quoteTokenSymbol: string\n  quoteTokenAdresses: { 56: string; 97: string }\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","export default {\n  cake: {\n    56: '0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\n    97: '0xADA2270B0CB5b6254d3d48A6fEE55b72693B746A',\n  },\n  masterChef: {\n    56: '0x67905ff1Ada0C11720E7298840206E5bdB8d3646',\n    97: '0xE37Aa693d2Ab77721E11e55bfBC723cf4457b78E',\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee',\n  },\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\nimport contracts from './contracts'\n\nconst pools: PoolConfig[] = [\n  {\n    sousId: 1,\n    tokenName: 'STOS',\n    stakingTokenName: QuoteToken.STOS,\n    earningToken: '0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\n    stakingTokenAddress: '0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\n    contractAddress: {\n      97: '0x52B0b88b172E0b21f0558605496Ab46bb1Ce0557',\n      56: '0x0a886563c8741A4d08599bB91ee31d67e79567E8',\n    },\n    poolCategory: PoolCategory.COMMUNITY,\n    projectLink: 'https://stos.finance/',\n    harvest: true,\n    tokenPerBlock: '0.000459896',\n    sortOrder: 1,\n    isFinished: false,\n    tokenDecimals: 18,\n    quoteTokenSymbol: QuoteToken.STOS,\n    quoteTokenAdresses: contracts.cake,\n  },\n  {\n    sousId: 3,\n    tokenName: 'STOS',\n    stakingTokenName: QuoteToken.STOSBNB,\n    earningToken: '0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\n    stakingTokenAddress: '0xe0E3F3698ba35487e5285fDfd31a5B8d8F564D8b',\n    contractAddress: {\n      97: '0x52B0b88b172E0b21f0558605496Ab46bb1Ce0557',\n      56: '0x4c55A4D6b9B0F27B45a6c88c2f6D306511FA28a0',\n    },\n    poolCategory: PoolCategory.COMMUNITY,\n    projectLink: 'https://stos.finance/',\n    harvest: true,\n    tokenPerBlock: '0.000689845',\n    sortOrder: 2,\n    isFinished: false,\n    tokenDecimals: 18,\n    quoteTokenSymbol: QuoteToken.STOSBNB,\n    quoteTokenAdresses: contracts.cake,\n  },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport cakeABI from 'config/abi/cake.json'\nimport wbnbABI from 'config/abi/weth.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getWbnbAddress } from 'utils/addressHelpers'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name: 'startBlock',\n    }\n  })\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name: 'bonusEndBlock',\n    }\n  })\n\n  const starts = await multicall(sousChefABI, callsStartBlock)\n  const ends = await multicall(sousChefABI, callsEndBlock)\n\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index]\n    const endBlock = ends[index]\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON(),\n    }\n  })\n}\n\nexport const fetchPoolsTotalStatking = async () => {\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n  const bnbPool = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\n\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\n    return {\n      address: poolConfig.stakingTokenAddress,\n      name: 'balanceOf',\n      params: [poolConfig.contractAddress[CHAIN_ID]],\n    }\n  })\n\n  const callsBnbPools = bnbPool.map((poolConfig) => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [poolConfig.contractAddress[CHAIN_ID]],\n    }\n  })\n\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\n    })),\n    ...bnbPool.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\n    })),\n  ]\n}\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingLife('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'STOS-BUSD LP',\n    lpAddresses: {\n      97: '0xE2115e605a81dc6CB448f5111DE6bEf5B8a760DA',\n      56: '0x5eE167b75118125e7d46add5cE61F749BB977A00',\n    },\n    tokenSymbol: 'STOS',\n    tokenAddresses: {\n      97: '0xADA2270B0CB5b6254d3d48A6fEE55b72693B746A',\n      56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'STOS-BNB LP',\n    lpAddresses: {\n      97: '0x197885A5af8ffdC945f2c5677A6E0F3A84C141A2',\n      56: '0x45b2eF2ECe32b34D20F6C6caD49043740B05f2A5',\n    },\n    tokenSymbol: 'STOS',\n    tokenAddresses: {\n      97: '0xADA2270B0CB5b6254d3d48A6fEE55b72693B746A',\n      56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: 'BNB-BUSD LP',\n    lpAddresses: {\n      97: '0xa75c80e7Ca70505AAB6062cF15A2cFC71b6138C0',\n      56: '0x1B96B92314C44b159149f7E0303511fB2Fc4774f',\n    },\n    tokenSymbol: 'BUSD',\n    tokenAddresses: {\n      97: '0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Actor', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    return true\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Buy SafeSTOS',\n        href: 'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://exchange.pancakeswap.finance/#/pool',\n      },\n    ],\n  },\n  // {\n  //   label: 'Farms',\n  //   icon: 'FarmIcon',\n  //   href: '/farms',\n  // },\n  {\n    label: 'Earn SafeSTOS',\n    icon: 'PoolIcon',\n    href: '/pools',\n  },\n  // {\n  //   label: 'Lottery',\n  //   icon: 'TicketIcon',\n  //   href: '/lottery',\n  // },\n  // {\n  //   label: 'NFT',\n  //   icon: 'NftIcon',\n  //   href: '/nft',\n  // },\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'Bscscan',\n        href: 'https://bscscan.com/token/0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\n      },\n      {\n        label: 'Chart',\n        href: 'https://dex.guru/token/0x9eab0a93b0cd5d904493694f041bdcedb97b88c6-bsc',\n      },\n      {\n        label: 'Coingecko Coming Soon',\n        href: '#',\n      },\n      {\n        label: 'CoinMarketCap Coming Soon',\n        href: '#',\n      },\n    ],\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Github',\n        href: 'https://github.com/stosent/',\n      },\n      {\n        label: 'Medium',\n        href: 'https://stos-entertainment-co.medium.com/',\n      },\n    ],\n  },\n  {\n    label: 'Audits Coming Soon',\n    icon: 'AuditIcon',\n    href: '#',\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { useSTOSPrice } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\nimport './style.css'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const STOSValue = useSTOSPrice()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={STOSValue.toNumber()}\n      links={config}\n      backgroundVideo=\"./videos/bg_video.mp4\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData, useFetchPriceData, useFetchTotalSupplyData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n// import NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\n// const Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\nconst Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  useFetchPriceData()\n\n  useFetchTotalSupplyData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            {/* <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/nests\">\n              <Farms tokenMode />\n            </Route> */}\n            <Route path=\"/pools\">\n              <Pools />\n            </Route>\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n\n      {/* <NftGlobalNotification /> */}\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport { fetchPriceDataAsync, fetchTotalSupplyDataAsync } from './stos'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { useAppDispatch } from 'state'\nimport {\n  fetchFarmsPublicDataAsync,\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchPriceDataAsync,\n  fetchTotalSupplyDataAsync,\n} from './actions'\nimport { State, Farm, Pool, PriceState } from './types'\nimport { QuoteToken } from '../config/constants/types'\nimport { fetchPrices } from './prices'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// For Price\nexport const useFetchPriceData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchPriceDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// For Total Supply\nexport const useFetchTotalSupplyData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchTotalSupplyDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useFetchPriceList = () => {\n  const { slowRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchPrices())\n  }, [dispatch, slowRefresh])\n}\n\nexport const useGetApiPrices = () => {\n  const prices: PriceState['data'] = useSelector((state: State) => state.prices.data)\n  return prices\n}\n\nexport const useGetApiPrice = (address: string) => {\n  const prices = useGetApiPrices()\n\n  if (!prices) {\n    return null\n  }\n\n  return prices[address.toLowerCase()]\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const cakeBnbFarm = useFarmFromPid(1)\n  const bnbBusdFarm = useFarmFromPid(2)\n\n  const bnbBusdPrice = bnbBusdFarm.tokenPriceVsQuote ? new BigNumber(1).div(bnbBusdFarm.tokenPriceVsQuote) : ZERO\n  const cakeBusdPrice = cakeBnbFarm.tokenPriceVsQuote ? bnbBusdPrice.times(cakeBnbFarm.tokenPriceVsQuote) : ZERO\n\n  return cakeBusdPrice\n}\n\nexport const useSTOSPrice = (): BigNumber => {\n  const { price } = useSelector((state: State) => state.stos.data)\n  return price ? new BigNumber(price) : ZERO\n}\n\nexport const useTotalSupplyPrice = (): BigNumber => {\n  const { totalSupply } = useSelector((state: State) => state.stos.data)\n  return totalSupply ? new BigNumber(totalSupply) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n"],"sourceRoot":""}