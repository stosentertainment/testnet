{"version":3,"sources":["utils/formatBalance.ts","hooks/useTickets.ts","utils/erc20.ts","hooks/useTokenBalance.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useGetLotteryHasDrawn.ts","utils/lotteryUtils.js","hooks/useBuyLottery.ts","components/Input/Input.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","useTotalRewards","useState","rewards","setRewards","lotteryContract","useLottery","fastRefresh","useRefresh","useEffect","a","getTotalRewards","res","fetchBalance","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","account","useWallet","ticketsContract","useLotteryTicket","useCallback","getTotalClaim","claim","useWinningNumbers","winngNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","numbers","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbaers","useTickets","lotteryNumber","tickets","setTickets","getTickets","getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","useTokenBalance","setBalance","ethereum","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","getLotteryStatus","state","fetchLotteryStatus","multiCall","abi","calls","web3","getWeb3","multi","MultiCallAbi","getMulticallAddress","itf","Interface","newCalls","slice","calldata","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","times","toString","send","from","on","tx","transactionHash","console","error","customLotteryNum","issueIndex","issueIdex","getTicketsAmount","calls1","Array","apply","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","finanltokenIds","r","drawed","calls4","reduce","p","c","sum","getMax","maxNumber","getLotteryIssueIndex","matchNumber","historyAmount","amount","parseInt","historyNumbers","winningNumbers","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","txHash","useMultiBuyLottery","onMultiBuy","useMaxNumber","max","setMax","fetchMax","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onSelectMax","TranslateString","useI18n","onClick","toLocaleString","BuyTicketModal","onDismiss","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","maxTickets","handleBuy","Math","floor","random","handleSelectMax","Number","title","e","currentTarget","Tips","Announce","Final","fullWidth","variant","disabled"],"mappings":"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","file":"static/js/6.63d671ac.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n      setRewards(new BigNumber(res))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\n\n  return { claimLoading, claimAmount }\n}\n\nexport const useWinningNumbers = () => {\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winngNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport default useTickets\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery } from 'hooks/useContract'\nimport { getLotteryStatus } from 'utils/lotteryUtils'\n\n/**\n * Returns whether or not the current lottery has drawn numbers\n *\n * @return {Boolean}\n */\nconst useGetLotteryHasDrawn = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  useEffect(() => {\n    if (account && lotteryContract) {\n      const fetchLotteryStatus = async () => {\n        const state = await getLotteryStatus(lotteryContract)\n        setLotteryHasDrawn(state)\n      }\n\n      fetchLotteryStatus()\n    }\n  }, [account, lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport default useGetLotteryHasDrawn\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { getMulticallAddress } from './addressHelpers'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (ticketIssue.toString() === issueIdex) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finanltokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finanltokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finanltokenIds.length > 200) {\n    finanltokenIds = finanltokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finanltokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIdex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length }).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenids = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIdex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenids.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0))\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIdex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIdex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call()\n    return amount / 1e18 / 10\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  onSelectMax?: () => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTokenInput>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(new BigNumber(10))))\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy('10', numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > 40) {\n      setVal('40')\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * 10\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"STOS\"\n      />\n      <div>\n        <Tips>{TranslateString(456, 'Your amount must be a multiple of 10 STOS')}</Tips>\n        <Tips>{TranslateString(458, '1 Ticket = 10 STOS')}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your STOS cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} STOS`)}</Final>\n      </div>\n      <ModalActions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          fullWidth\n          disabled={pendingTx || parseInt(val) > Number(maxTickets) || parseInt(val) > 40 || parseInt(val) < 1}\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n"],"sourceRoot":""}