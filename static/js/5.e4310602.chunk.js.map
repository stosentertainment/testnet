{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","hooks/useWeb3.ts","config/constants/index.ts","hooks/useContract.ts","config/constants/nfts.ts","hooks/useBlock.ts"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useERC20","erc20","useCake","getCakeAddress","useRabbitMintingFarm","nftFarm","usePancakeRabbits","nft","useNFTFarmContract","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useLP","univ2lp","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","originalImage","previewImage","blurImage","sortOrder","fileType","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","active","useBlock","BlockContext"],"mappings":"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","file":"static/js/5.e4310602.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\nimport univ2lp from 'config/abi/uni_v2_lp.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return useContract(nftMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return useContract(nftAbi, address)\n}\n\nexport const useNFTFarmContract = (address: string) => {\n  const nftFarmAbi = (nftFarm as unknown) as AbiItem\n  return useContract(nftFarmAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useLP = (address: string) => {\n  const lpAbi = (univ2lp as unknown) as AbiItem\n  return useContract(lpAbi, address)\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import { Nft } from './types'\n\nexport const NftFarm = '0xAc5A9cA010969C70B97E59d1f2A0089371C3095b'\nexport const NFT = '0xd77486cD6C6b1cFD272CF1FE0b13Ac6C58C7C12D'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Main Pass NFT',\n    metadata: '',\n    description:\n      'All inclusive Main Event Venue DJ Concert. Open Bar. Lottery draw for the afterparty exclusive. Transportation to and from all events from approved hotels.',\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmaAZXjDP9RaccmbqXBmxh9ByfLdxzgJHdb7mSbKVghzd4',\n    previewImage: 'preview1.png',\n    blurImage: 'swapsies-blur.png',\n    sortOrder: 999,\n    fileType: 'mp4',\n    nftId: 1,\n    tokenAmount: 10,\n    tokenSupply: 15,\n    nftFarmContract: '0xe876d9A1A8AA778c67bf04fe943677Df84eD99AA',\n    nftContract: '0x1605854923FC0bDC13F0336C06f4fB1c1e6e83eE',\n    active: false,\n  },\n  {\n    name: 'Yacht Pass NFT',\n    metadata: '',\n    description:\n      'All inclusive Yacht Party. Fully Catered. Open Bar. Private DJ. Full day Punta Cana booze cruise sightseeing tour. Main Event NFT’s included! (25 STOS Value). Transportation to and from all events',\n    originalImage: 'https://gateway.pinata.cloud/ipfs/Qmd4dPZsBbqpG1dNr4DxkiVyz9wpVQAhUw2cvqshn9e2Na',\n    previewImage: 'preview2.png',\n    blurImage: 'drizzle-blur.png',\n    sortOrder: 999,\n    fileType: 'mp4',\n    nftId: 0,\n    tokenAmount: 250,\n    tokenSupply: 50,\n    nftFarmContract: '0xe876d9A1A8AA778c67bf04fe943677Df84eD99AA',\n    nftContract: '0x1605854923FC0bDC13F0336C06f4fB1c1e6e83eE',\n    active: true,\n  },\n  {\n    name: 'VIP WEEK Pass NFT',\n    metadata: '',\n    description:\n      '5 Bed Villa from a list of oceanfront choices. Personal chef with daily menus. Transportation to and from the events. Yacht Party Admission. Main Event Admission + Afterparty. Party of 8 covered for Villa and all admissions. 4 days, 3 nights (extensions extra)',\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmdTZT6LS9AULcvwGSYuDS6oBQ7GuHqKWJcSu1ymX3crXV',\n    previewImage: 'preview3.png',\n    blurImage: 'blueberries-blur.png',\n    sortOrder: 999,\n    fileType: 'mp4',\n    nftId: 2,\n    tokenAmount: 20,\n    tokenSupply: 5,\n    nftFarmContract: '0xe876d9A1A8AA778c67bf04fe943677Df84eD99AA',\n    nftContract: '0x1605854923FC0bDC13F0336C06f4fB1c1e6e83eE',\n    active: false,\n  },\n]\n\nexport default Nfts\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n"],"sourceRoot":""}