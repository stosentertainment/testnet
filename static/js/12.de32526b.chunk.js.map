{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","hooks/useWeb3.ts","config/constants/index.ts","hooks/useContract.ts","utils/formatBalance.ts","utils/callHelpers.ts","hooks/useBlock.ts","hooks/useApprove.ts","components/UnlockButton.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","config/index.ts","components/Input/Input.tsx","components/layout/Flex.tsx","components/Label/Label.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","components/Balance.tsx","components/TokenInput/TokenInput.tsx","views/Pools/components/DepositModal.tsx","views/Pools/components/WithdrawModal.tsx","views/Pools/components/CompoundModal.tsx","views/Pools/components/CardTitle.tsx","views/Pools/components/Card.tsx","views/Pools/components/OldSyrupTitle.tsx","views/Pools/components/HarvestButton.tsx","views/Pools/components/CardFooter.tsx","components/Tags.tsx","views/Pools/components/PoolCard.tsx","views/Pools/components/PoolCardLP.tsx","utils/apr.js","views/Pools/components/PoolTabButtons/index.tsx","views/Pools/components/Divider.tsx","views/Pools/Syrup.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useERC20","erc20","useCake","getCakeAddress","useRabbitMintingFarm","nftFarm","usePancakeRabbits","nft","useNFTFarmContract","useLottery","lottery","getLotteryAddress","useLotteryTicket","lotteryTicket","getLotteryTicketAddress","useMasterchef","masterChef","getMasterChefAddress","useLP","univ2lp","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useBlock","BlockContext","useSousApprove","dispatch","useDispatch","onApprove","useCallback","updateUserAllowance","useLotteryApprove","cakeContract","lotteryContract","useNftApprove","tokenContract","spenderAddress","UnlockButton","props","TranslateString","connect","reset","onPresentConnectModal","useWalletModal","onClick","StyledSpacer","styled","div","size","Spacer","s","spacing","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","child","i","EXPONENTIAL_AT","DECIMAL_PLACES","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","FlexLayout","StyledLabel","isFinished","Label","useSousStake","isUsingBnb","handleStake","updateUserStakedBalance","updateUserBalance","onStake","SYRUPIDS","useSousUnstake","isOldSyrup","onUnstake","txHash","console","info","updateUserPendingReward","useSousHarvest","handleHarvest","onReward","StyledText","Text","isDisabled","color","textDisabled","Balance","fontSize","unit","previousValue","bold","start","end","duration","separator","defaultProps","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","e","currentTarget","handleSelectMax","title","fullWidth","variant","disabled","WithdrawModal","CompoundModal","earnings","BalanceRow","Number","CardTitle","Card","card","background","isActive","Title","ActionLink","OldSyrupTitle","hasBalance","href","target","StyledButton","button","padding","undefined","StyledLink","Link","StyledExternalLink","Button","buttonSize","buttonPadding","to","buttonColor","ButtonChild","boxShadow","tags","outline","startIcon","CORE","COMMUNITY","StyledFooter","isDark","StyledDetailsButton","Details","Row","FlexFull","TokenLink","CardFooter","projectLink","totalStaked","blocksRemaining","blocksUntilStart","stakingTokenName","isOpen","setIsOpen","Icon","ChevronUp","ChevronDown","Tag","style","marginBottom","role","aria-label","memo","PoolFinishedSash","StyledCardActions","BalanceAndCompound","StyledActionSpacer","StyledDetails","PoolCard","image","stakingTokenAddress","apy","tokenDecimals","startBlock","endBlock","userData","stakingLimit","isBnbPool","stakingTokenContract","block","requestedApproval","setRequestedApproval","allowance","stakingTokenBalance","stakedBalance","pendingReward","Math","QuoteToken","SYRUP","accountHasStakedBalance","needsApproval","isCardActive","convertedLimit","multipliedBy","useModal","isGreaterThan","onPresentDeposit","onPresentCompound","onPresentWithdraw","handleApprove","error","backdropFilter","display","alignItems","flex","src","width","height","alt","HarvestButton","eq","isNaN","isFinite","tokenPerBlock","lpTokenContract","totalSupply","setTotalSupply","reserve0","setReserve0","reserve1","setReserve1","setToken0","setToken1","token0price","useFarms","useSTOSPrice","token1price","usePriceBnbBusd","rewardTokenPrice","token0","call","then","res0","token1","res1","res2","getReserves","reserves","_reserve0","_reserve1","baseValue","quoteValue","apr","stakingTokenPrice","totalRewardPricePerYear","totalStakingTokenInPool","getPoolApr","plus","parseFloat","getApr","PoolTabButtons","useRouteMatch","url","isExact","Wrapper","activeIndex","as","textSubtle","Hero","Farm","path","pools","usePools","poolsWithApy","partition","finishedPools","openPools","Page","mb","Divider","Flex","exact","orderBy","earningToken","PoolCardLP"],"mappings":"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","file":"static/js/12.de32526b.chunk.js","sourcesContent":["import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the ethereum provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\r\n  const refEth = useRef(ethereum)\r\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\r\n\r\n  useEffect(() => {\r\n    if (ethereum !== refEth.current) {\r\n      setweb3(new Web3(ethereum || httpProvider))\r\n      refEth.current = ethereum\r\n    }\r\n  }, [ethereum])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import farmsConfig from './farms'\r\n\r\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\r\n\r\nexport { farmsConfig, communityFarms }\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n","import { useEffect, useState } from 'react'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport ifo from 'config/abi/ifo.json'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport lottery from 'config/abi/lottery.json'\r\nimport lotteryTicket from 'config/abi/lotteryNft.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\r\nimport univ2lp from 'config/abi/uni_v2_lp.json'\r\n\r\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = useWeb3()\r\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\r\n\r\n  useEffect(() => {\r\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\r\n  }, [abi, address, contractOptions, web3])\r\n\r\n  return contract\r\n}\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoContract = (address: string) => {\r\n  const ifoAbi = (ifo as unknown) as AbiItem\r\n  return useContract(ifoAbi, address)\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const erc20Abi = (erc20 as unknown) as AbiItem\r\n  return useContract(erc20Abi, address)\r\n}\r\n\r\nexport const useCake = () => {\r\n  return useERC20(getCakeAddress())\r\n}\r\n\r\nexport const useRabbitMintingFarm = (address: string) => {\r\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\r\n  return useContract(nftMintingFarmAbi, address)\r\n}\r\n\r\nexport const usePancakeRabbits = (address: string) => {\r\n  const nftAbi = (nft as unknown) as AbiItem\r\n  return useContract(nftAbi, address)\r\n}\r\n\r\nexport const useNFTFarmContract = (address: string) => {\r\n  const nftFarmAbi = (nftFarm as unknown) as AbiItem\r\n  return useContract(nftFarmAbi, address)\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const abi = (lottery as unknown) as AbiItem\r\n  return useContract(abi, getLotteryAddress())\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const abi = (lotteryTicket as unknown) as AbiItem\r\n  return useContract(abi, getLotteryTicketAddress())\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const abi = (masterChef as unknown) as AbiItem\r\n  return useContract(abi, getMasterChefAddress())\r\n}\r\n\r\nexport const useLP = (address: string) => {\r\n  const lpAbi = (univ2lp as unknown) as AbiItem\r\n  return useContract(lpAbi, address)\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\r\n  const abi = (rawAbi as unknown) as AbiItem\r\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\r\n}\r\n\r\nexport default useContract\r\n","import BigNumber from 'bignumber.js'\r\n\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\r\n  return displayBalance.toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\r\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(0) })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n\r\n// Approve an NFT\r\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { connect, reset } = useWallet()\r\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(1)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const CAKE_POOL_PID = 1\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface LabelProps {\r\n  text?: string\r\n  isFinished?: boolean\r\n}\r\n\r\nconst Label: React.FC<LabelProps> = ({ text, isFinished = false }) => (\r\n  <StyledLabel isFinished={isFinished}>{text}</StyledLabel>\r\n)\r\n\r\nconst StyledLabel = styled.div<{ isFinished: boolean }>`\r\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'primary']};\r\n  font-size: 14px;\r\n`\r\n\r\nexport default Label\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [1]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport styled from 'styled-components'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface TextProps {\r\n  isDisabled?: boolean\r\n  fontSize?: string\r\n  color?: string\r\n}\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value?: number\r\n  decimals?: number\r\n  unit?: string\r\n}\r\n\r\nconst StyledText = styled(Text)<TextProps>`\r\n  color: ${({ isDisabled, color, theme }) => (isDisabled ? theme.colors.textDisabled : color)};\r\n`\r\n\r\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit }) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n\r\n  return (\r\n    <StyledText bold color={color} fontSize={fontSize} isDisabled={isDisabled}>\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {value && unit && <span>{unit}</span>}\r\n    </StyledText>\r\n  )\r\n}\r\n\r\nBalance.defaultProps = {\r\n  fontSize: '32px',\r\n  isDisabled: false,\r\n  color: 'text',\r\n  decimals: 3,\r\n}\r\n\r\nexport default Balance\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {depositFeeBP > 0 ? (\r\n        <StyledMaxText>\r\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\r\n          {symbol}\r\n        </StyledMaxText>\r\n      ) : null}\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from '../../../components/TokenInput'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          fullWidth\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from '../../../components/TokenInput'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport React, { useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport Balance from 'components/Balance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  earnings: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst CompoundModal: React.FC<DepositModalProps> = ({ earnings, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(earnings)\r\n  }, [earnings])\r\n\r\n  return (\r\n    <Modal\r\n      title={`${TranslateString(999, 'Compound')} ${TranslateString(330, `${tokenName} Earned`)}`}\r\n      onDismiss={onDismiss}\r\n    >\r\n      <BalanceRow>\r\n        <Balance value={Number(fullBalance)} />\r\n      </BalanceRow>\r\n      <ModalActions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          id=\"compound-cake\"\r\n          fullWidth\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(fullBalance)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CompoundModal\r\n\r\nconst BalanceRow = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: row;\r\n`\r\n","import styled from 'styled-components'\r\n\r\ninterface StyledTitleProps {\r\n  isFinished?: boolean\r\n}\r\n\r\nconst CardTitle = styled.div<StyledTitleProps>`\r\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'text']};\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 1.1;\r\n  margin-bottom: 14px;\r\n`\r\n\r\nexport default CardTitle\r\n","import styled from 'styled-components'\r\n\r\nconst Card = styled.div<{ isActive?: boolean; isFinished?: boolean }>`\r\n  background: ${(props) => props.theme.card.background};\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  border-radius: 32px;\r\n  display: flex;\r\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\r\n  box-shadow: ${({ isActive }) =>\r\n    isActive\r\n      ? '0px 0px 0px 1px #0098A1, 0px 0px 4px 8px rgba(31, 199, 212, 0.4);'\r\n      : '0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05)'};\r\n  flex-direction: column;\r\n  position: relative;\r\n`\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport CardTitle from './CardTitle'\r\n\r\ninterface Props {\r\n  hasBalance?: boolean\r\n}\r\n\r\nconst Title = styled.div`\r\n  color: #ed4b9e;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst ActionLink = styled.a`\r\n  color: #ed4b9e;\r\n  font-size: 14px;\r\n`\r\n\r\nconst OldSyrupTitle: React.FC<Props> = ({ hasBalance = false }) => {\r\n  if (hasBalance) {\r\n    return (\r\n      <div>\r\n        <Title>Action Required</Title>\r\n        <ActionLink\r\n          href=\" https://pancakeswap.medium.com/urgent-action-required-changes-to-syrup-pools-70b98d7b2541\"\r\n          target=\"_blank\"\r\n        >\r\n          What do I need to do?\r\n        </ActionLink>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CardTitle isFinished>FINISHED</CardTitle>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OldSyrupTitle\r\n","import React, { useContext, useMemo } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\ninterface ButtonProps {\r\n  children?: React.ReactNode\r\n  disabled?: boolean\r\n  href?: string\r\n  onClick?: () => void\r\n  size?: 'sm' | 'md' | 'lg'\r\n  text?: string\r\n  to?: string\r\n  variant?: 'default' | 'secondary' | 'tertiary'\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ children, disabled, href, onClick, size, text, to }) => {\r\n  const { colors, spacing } = useContext(ThemeContext)\r\n  const buttonColor = colors.background\r\n\r\n  let boxShadow: string\r\n  let buttonSize: number\r\n  let buttonPadding: number\r\n  let fontSize: number\r\n  switch (size) {\r\n    case 'sm':\r\n      buttonPadding = spacing[3]\r\n      buttonSize = 36\r\n      fontSize = 14\r\n      break\r\n    case 'lg':\r\n      buttonPadding = spacing[4]\r\n      buttonSize = 72\r\n      fontSize = 16\r\n      break\r\n    case 'md':\r\n    default:\r\n      buttonPadding = spacing[4]\r\n      buttonSize = 56\r\n      fontSize = 16\r\n  }\r\n\r\n  const ButtonChild = useMemo(() => {\r\n    if (to) {\r\n      return <StyledLink to={to}>{text}</StyledLink>\r\n    }\r\n    if (href) {\r\n      return (\r\n        <StyledExternalLink href={href} target=\"__blank\">\r\n          {text}\r\n        </StyledExternalLink>\r\n      )\r\n    }\r\n    return text\r\n  }, [href, text, to])\r\n\r\n  return (\r\n    <StyledButton\r\n      boxShadow={boxShadow}\r\n      color={buttonColor}\r\n      disabled={disabled}\r\n      fontSize={fontSize}\r\n      onClick={onClick}\r\n      padding={buttonPadding}\r\n      size={buttonSize}\r\n    >\r\n      {children}\r\n      {ButtonChild}\r\n    </StyledButton>\r\n  )\r\n}\r\n\r\ninterface StyledButtonProps {\r\n  boxShadow: string\r\n  color: string\r\n  disabled?: boolean\r\n  fontSize: number\r\n  padding: number\r\n  size: number\r\n}\r\n\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  align-items: center;\r\n  background: ${(props) => (!props.disabled ? props.theme.card.background : `#ddd`)};\r\n  border: 0;\r\n  border-radius: 12px;\r\n  color: ${(props) => (!props.disabled ? `#32cad7` : `#acaaaf`)};\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-size: ${(props) => props.fontSize}px;\r\n  font-weight: 700;\r\n  height: ${(props) => props.size}px;\r\n  justify-content: center;\r\n  outline: none;\r\n  padding-left: ${(props) => props.padding}px;\r\n  padding-right: ${(props) => props.padding}px;\r\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\r\n  width: 100%;\r\n  border: 2px solid ${(props) => (!props.disabled ? `#33cbd7` : `#eee`)};\r\n  width: 100px;\r\n  height: 30px;\r\n  font-size: 14px;\r\n  padding: 0px;\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`\r\n\r\nconst StyledExternalLink = styled.a`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`\r\n\r\nexport default Button\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { ChevronDown, ChevronUp } from 'react-feather'\r\nimport Balance from 'components/Balance'\r\nimport { CommunityTag, CoreTag, BinanceTag } from 'components/Tags'\r\nimport { PoolCategory } from 'config/constants/types'\r\n\r\nconst tags = {\r\n  [PoolCategory.BINANCE]: BinanceTag,\r\n  [PoolCategory.CORE]: CoreTag,\r\n  [PoolCategory.COMMUNITY]: CommunityTag,\r\n}\r\n\r\ninterface Props {\r\n  projectLink: string\r\n  totalStaked: BigNumber\r\n  blocksRemaining: number\r\n  isFinished: boolean\r\n  blocksUntilStart: number\r\n  poolCategory: PoolCategory\r\n  stakingTokenName: string\r\n}\r\n\r\nconst StyledFooter = styled.div<{ isFinished: boolean }>`\r\n  border-top: 1px solid ${({ theme }) => (theme.isDark ? '#524B63' : '#E9EAEB')};\r\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled2' : 'primary2']};\r\n  padding: 24px;\r\n`\r\n\r\nconst StyledDetailsButton = styled.button`\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  height: 32px;\r\n  justify-content: center;\r\n  outline: 0;\r\n  padding: 0;\r\n  &:hover {\r\n    opacity: 0.9;\r\n  }\r\n\r\n  & > svg {\r\n    margin-left: 4px;\r\n  }\r\n`\r\n\r\nconst Details = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst FlexFull = styled.div`\r\n  flex: 1;\r\n`\r\nconst Label = styled.div`\r\n  font-size: 14px;\r\n`\r\nconst TokenLink = styled.a`\r\n  font-size: 14px;\r\n  text-decoration: none;\r\n  color: #12aab5;\r\n`\r\n\r\nconst CardFooter: React.FC<Props> = ({\r\n  projectLink,\r\n  totalStaked,\r\n  blocksRemaining,\r\n  isFinished,\r\n  blocksUntilStart,\r\n  poolCategory,\r\n  stakingTokenName,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const Icon = isOpen ? ChevronUp : ChevronDown\r\n\r\n  const handleClick = () => setIsOpen(!isOpen)\r\n  const Tag = tags[poolCategory]\r\n\r\n  return (\r\n    <StyledFooter isFinished={isFinished}>\r\n      <Row>\r\n        <FlexFull>\r\n          <Tag />\r\n        </FlexFull>\r\n        <StyledDetailsButton onClick={handleClick}>\r\n          {isOpen ? 'Hide' : 'Details'} <Icon />\r\n        </StyledDetailsButton>\r\n      </Row>\r\n      {isOpen && (\r\n        <Details>\r\n          <Row style={{ marginBottom: '4px' }}>\r\n            <FlexFull>\r\n              <Label>\r\n                <span role=\"img\" aria-label=\"syrup\">\r\n                  🥞{' '}\r\n                </span>\r\n                Total {stakingTokenName} Staked\r\n              </Label>\r\n            </FlexFull>\r\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBalanceNumber(totalStaked)} />\r\n          </Row>\r\n          {/* {blocksUntilStart > 0 && (\r\n            <Row>\r\n              <FlexFull>\r\n                <Label>{TranslateString(410, 'Start')}:</Label>\r\n              </FlexFull>\r\n              <Balance fontSize=\"14px\" isDisabled={isFinished} value={blocksUntilStart} decimals={0} />\r\n            </Row>\r\n          )} */}\r\n          {blocksRemaining > 0 && (\r\n            <Row>\r\n              <FlexFull>\r\n                <Label>{TranslateString(410, 'Remaining Blocks')}:</Label>\r\n              </FlexFull>\r\n              <Balance fontSize=\"14px\" isDisabled={isFinished} value={blocksRemaining} decimals={0} />\r\n            </Row>\r\n          )}\r\n          <TokenLink href={projectLink} target=\"_blank\">\r\n            {TranslateString(412, 'View project site')}\r\n          </TokenLink>\r\n        </Details>\r\n      )}\r\n    </StyledFooter>\r\n  )\r\n}\r\n\r\nexport default React.memo(CardFooter)\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, IconButton, useModal, AddIcon, Image } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Label from 'components/Label'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { useSousApprove } from 'hooks/useApprove'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useSousStake } from 'hooks/useStake'\r\nimport { useSousUnstake } from 'hooks/useUnstake'\r\nimport useBlock from 'hooks/useBlock'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useSousHarvest } from 'hooks/useHarvest'\r\nimport Balance from 'components/Balance'\r\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\r\nimport { Pool } from 'state/types'\r\nimport DepositModal from './DepositModal'\r\nimport WithdrawModal from './WithdrawModal'\r\nimport CompoundModal from './CompoundModal'\r\nimport CardTitle from './CardTitle'\r\nimport Card from './Card'\r\nimport OldSyrupTitle from './OldSyrupTitle'\r\nimport HarvestButton from './HarvestButton'\r\nimport CardFooter from './CardFooter'\r\n\r\ninterface PoolWithApy extends Pool {\r\n  apy: BigNumber\r\n}\r\n\r\ninterface HarvestProps {\r\n  pool: PoolWithApy\r\n}\r\n\r\nconst PoolCard: React.FC<HarvestProps> = ({ pool }) => {\r\n  const {\r\n    sousId,\r\n    image,\r\n    tokenName,\r\n    stakingTokenName,\r\n    stakingTokenAddress,\r\n    projectLink,\r\n    harvest,\r\n    apy,\r\n    tokenDecimals,\r\n    poolCategory,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    isFinished,\r\n    userData,\r\n    stakingLimit,\r\n  } = pool\r\n  // Pools using native BNB behave differently than pools using a token\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const TranslateString = useI18n()\r\n  const stakingTokenContract = useERC20(stakingTokenAddress)\r\n  const { account } = useWallet()\r\n  const block = useBlock()\r\n  const { onApprove } = useSousApprove(stakingTokenContract, sousId)\r\n  const { onStake } = useSousStake(sousId, isBnbPool)\r\n  const { onUnstake } = useSousUnstake(sousId)\r\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\r\n\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n\r\n  const allowance = new BigNumber(userData?.allowance || 0)\r\n  const stakingTokenBalance = new BigNumber(userData?.stakingTokenBalance || 0)\r\n  const stakedBalance = new BigNumber(userData?.stakedBalance || 0)\r\n  const earnings = new BigNumber(userData?.pendingReward || 0)\r\n\r\n  const blocksUntilStart = Math.max(startBlock - block, 0)\r\n  const blocksRemaining = Math.max(endBlock - block, 0)\r\n  const isOldSyrup = stakingTokenName === QuoteToken.SYRUP\r\n  const accountHasStakedBalance = stakedBalance?.toNumber() > 0\r\n  const needsApproval = !accountHasStakedBalance && !allowance.toNumber() && !isBnbPool\r\n  const isCardActive = isFinished && accountHasStakedBalance\r\n\r\n  const convertedLimit = new BigNumber(stakingLimit).multipliedBy(new BigNumber(10).pow(tokenDecimals))\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={stakingLimit && stakingTokenBalance.isGreaterThan(convertedLimit) ? convertedLimit : stakingTokenBalance}\r\n      onConfirm={onStake}\r\n      tokenName={stakingLimit ? `${stakingTokenName} (${stakingLimit} max)` : stakingTokenName}\r\n    />,\r\n  )\r\n\r\n  const [onPresentCompound] = useModal(\r\n    <CompoundModal earnings={earnings} onConfirm={onStake} tokenName={stakingTokenName} />,\r\n  )\r\n\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={stakingTokenName} />,\r\n  )\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const txHash = await onApprove()\r\n      // user rejected tx or didn't go thru\r\n      if (!txHash) {\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, setRequestedApproval])\r\n\r\n  return (\r\n    <Card\r\n      isActive={isCardActive}\r\n      isFinished={isFinished && sousId !== 0}\r\n      style={{ backdropFilter: 'blur(3px)', background: 'rgba(39, 38, 44, 0.8)' }}\r\n    >\r\n      {isFinished && sousId !== 0 && <PoolFinishedSash />}\r\n      <div style={{ padding: '24px' }}>\r\n        <CardTitle isFinished={isFinished && sousId !== 0}>\r\n          {isOldSyrup && '[OLD]'} {tokenName} {TranslateString(348, 'Pool')}\r\n        </CardTitle>\r\n        <div style={{ marginBottom: '8px', display: 'flex', alignItems: 'center' }}>\r\n          <div style={{ flex: 1 }}>\r\n            <Image src={`/images/tokens/${image || tokenName}.png`} width={64} height={64} alt={tokenName} />\r\n          </div>\r\n          {account && harvest && !isOldSyrup && (\r\n            <HarvestButton\r\n              disabled={!earnings.toNumber() || pendingTx}\r\n              text={pendingTx ? 'Collecting' : 'Harvest'}\r\n              onClick={async () => {\r\n                setPendingTx(true)\r\n                await onReward()\r\n                setPendingTx(false)\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        {!isOldSyrup ? (\r\n          <BalanceAndCompound>\r\n            <Balance value={getBalanceNumber(earnings, tokenDecimals)} isDisabled={isFinished} />\r\n            {sousId === 0 && account && harvest && (\r\n              <HarvestButton\r\n                disabled={!earnings.toNumber() || pendingTx}\r\n                text={pendingTx ? TranslateString(999, 'Compounding') : TranslateString(999, 'Compound')}\r\n                onClick={onPresentCompound}\r\n              />\r\n            )}\r\n          </BalanceAndCompound>\r\n        ) : (\r\n          <OldSyrupTitle hasBalance={accountHasStakedBalance} />\r\n        )}\r\n        <Label isFinished={isFinished && sousId !== 0} text={TranslateString(330, `${tokenName} earned`)} />\r\n        <StyledCardActions>\r\n          {!account && <UnlockButton />}\r\n          {account &&\r\n            (needsApproval && !isOldSyrup ? (\r\n              <div style={{ flex: 1 }}>\r\n                <Button disabled={isFinished || requestedApproval} onClick={handleApprove} fullWidth>\r\n                  {`Approve ${stakingTokenName}`}\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <Button\r\n                  disabled={stakedBalance.eq(new BigNumber(0)) || pendingTx}\r\n                  onClick={\r\n                    isOldSyrup\r\n                      ? async () => {\r\n                          setPendingTx(true)\r\n                          await onUnstake('0')\r\n                          setPendingTx(false)\r\n                        }\r\n                      : onPresentWithdraw\r\n                  }\r\n                >\r\n                  {`Unstake ${stakingTokenName}`}\r\n                </Button>\r\n                <StyledActionSpacer />\r\n                {!isOldSyrup && (\r\n                  <IconButton disabled={isFinished && sousId !== 0} onClick={onPresentDeposit}>\r\n                    <AddIcon color=\"background\" />\r\n                  </IconButton>\r\n                )}\r\n              </>\r\n            ))}\r\n        </StyledCardActions>\r\n        <StyledDetails>\r\n          <div style={{ flex: 1 }}>{TranslateString(736, 'APY')}:</div>\r\n          {isFinished || isOldSyrup || !apy || apy?.isNaN() || !apy?.isFinite() ? (\r\n            '-'\r\n          ) : (\r\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={apy?.toNumber()} decimals={2} unit=\"%\" />\r\n          )}\r\n        </StyledDetails>\r\n        <StyledDetails>\r\n          <div style={{ flex: 1 }}>\r\n            <span role=\"img\" aria-label={stakingTokenName}>\r\n              🥞{' '}\r\n            </span>\r\n            {TranslateString(384, 'Your Stake')}:\r\n          </div>\r\n          <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBalanceNumber(stakedBalance)} />\r\n        </StyledDetails>\r\n      </div>\r\n      <CardFooter\r\n        projectLink={projectLink}\r\n        totalStaked={totalStaked}\r\n        blocksRemaining={blocksRemaining}\r\n        isFinished={isFinished}\r\n        blocksUntilStart={blocksUntilStart}\r\n        poolCategory={poolCategory}\r\n        stakingTokenName={stakingTokenName}\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst PoolFinishedSash = styled.div`\r\n  background-image: url('/images/pool-finished-sash.svg');\r\n  background-position: top right;\r\n  background-repeat: not-repeat;\r\n  height: 135px;\r\n  position: absolute;\r\n  right: -24px;\r\n  top: -24px;\r\n  width: 135px;\r\n`\r\n\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 16px 0;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: row;\r\n`\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledDetails = styled.div`\r\n  display: flex;\r\n  font-size: 14px;\r\n`\r\n\r\nexport default PoolCard\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, IconButton, useModal, AddIcon, Image } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Label from 'components/Label'\r\nimport { useERC20, useLP } from 'hooks/useContract'\r\nimport { useSousApprove } from 'hooks/useApprove'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useSousStake } from 'hooks/useStake'\r\nimport { useSousUnstake } from 'hooks/useUnstake'\r\nimport useBlock from 'hooks/useBlock'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useSousHarvest } from 'hooks/useHarvest'\r\nimport Balance from 'components/Balance'\r\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\r\nimport { Pool } from 'state/types'\r\nimport { useGetApiPrice, useFarms, usePriceBnbBusd, useSTOSPrice } from 'state/hooks'\r\nimport { getPoolApr, getLPprice } from 'utils/apr'\r\nimport DepositModal from './DepositModal'\r\nimport WithdrawModal from './WithdrawModal'\r\nimport CompoundModal from './CompoundModal'\r\nimport CardTitle from './CardTitle'\r\nimport Card from './Card'\r\nimport OldSyrupTitle from './OldSyrupTitle'\r\nimport HarvestButton from './HarvestButton'\r\nimport CardFooter from './CardFooter'\r\n\r\ninterface HarvestProps {\r\n  pool: Pool\r\n}\r\n\r\nconst PoolCard: React.FC<HarvestProps> = ({ pool }) => {\r\n  const {\r\n    sousId,\r\n    image,\r\n    tokenName,\r\n    stakingTokenName,\r\n    stakingTokenAddress,\r\n    projectLink,\r\n    harvest,\r\n    tokenDecimals,\r\n    poolCategory,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    isFinished,\r\n    userData,\r\n    stakingLimit,\r\n    tokenPerBlock,\r\n  } = pool\r\n  // Pools using native BNB behave differently than pools using a token\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const TranslateString = useI18n()\r\n  const stakingTokenContract = useERC20(stakingTokenAddress)\r\n  const lpTokenContract = useLP(stakingTokenAddress)\r\n\r\n\r\n  const [liquidity, setLiquidity] = useState(new BigNumber(0))\r\n  const [totalSupply, setTotalSupply] = useState(new BigNumber(0))\r\n\r\n  const [reserve0, setReserve0] = useState(new BigNumber(0))\r\n  const [reserve1, setReserve1] = useState(new BigNumber(0))\r\n\r\n  const [token0, setToken0] = useState()\r\n  const [token1, setToken1] = useState()\r\n\r\n  const { account } = useWallet()\r\n  const block = useBlock()\r\n  const { onApprove } = useSousApprove(stakingTokenContract, sousId)\r\n  const { onStake } = useSousStake(sousId, isBnbPool)\r\n  const { onUnstake } = useSousUnstake(sousId)\r\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\r\n  const farms = useFarms()\r\n\r\n  // APR\r\n  // const rewardTokenPrice = useGetApiPrice(pool.earningToken ? pool.earningToken : '')\r\n\r\n  // const token0price = useGetApiPrice(token0 !== undefined ? token0 : '')\r\n  // const token1price = useGetApiPrice(token1 !== undefined ? token1 : '')\r\n\r\n  const token0price = useSTOSPrice()\r\n  const token1price = usePriceBnbBusd()\r\n  const rewardTokenPrice = useSTOSPrice()\r\n\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n\r\n  const allowance = new BigNumber(userData?.allowance || 0)\r\n  const stakingTokenBalance = new BigNumber(userData?.stakingTokenBalance || 0)\r\n  const stakedBalance = new BigNumber(userData?.stakedBalance || 0)\r\n  const earnings = new BigNumber(userData?.pendingReward || 0)\r\n\r\n  const blocksUntilStart = Math.max(startBlock - block, 0)\r\n  const blocksRemaining = Math.max(endBlock - block, 0)\r\n  const isOldSyrup = stakingTokenName === QuoteToken.SYRUP\r\n  const accountHasStakedBalance = stakedBalance?.toNumber() > 0\r\n  const needsApproval = !accountHasStakedBalance && !allowance.toNumber() && !isBnbPool\r\n  const isCardActive = isFinished && accountHasStakedBalance\r\n\r\n  const convertedLimit = new BigNumber(stakingLimit).multipliedBy(new BigNumber(10).pow(tokenDecimals))\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={stakingLimit && stakingTokenBalance.isGreaterThan(convertedLimit) ? convertedLimit : stakingTokenBalance}\r\n      onConfirm={onStake}\r\n      tokenName={stakingLimit ? `${stakingTokenName} (${stakingLimit} max)` : stakingTokenName}\r\n    />,\r\n  )\r\n\r\n  const [onPresentCompound] = useModal(\r\n    <CompoundModal earnings={earnings} onConfirm={onStake} tokenName={stakingTokenName} />,\r\n  )\r\n\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={stakingTokenName} />,\r\n  )\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const txHash = await onApprove()\r\n      // user rejected tx or didn't go thru\r\n      if (!txHash) {\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, setRequestedApproval])\r\n\r\n  React.useEffect(() => {\r\n    if (stakingTokenAddress !== undefined) {\r\n      lpTokenContract.methods\r\n        .token0()\r\n        .call()\r\n        .then((res0) => {\r\n          setToken0(res0)\r\n          lpTokenContract.methods\r\n            .token1()\r\n            .call()\r\n            .then((res1) => {\r\n              setToken1(res1)\r\n              lpTokenContract.methods\r\n                .totalSupply()\r\n                .call()\r\n                .then((res2) => {\r\n                  setTotalSupply(new BigNumber(res2))\r\n                  lpTokenContract.methods\r\n                    .getReserves()\r\n                    .call()\r\n                    .then((reserves) => {\r\n                      setReserve0(new BigNumber(getBalanceNumber(reserves._reserve0)))\r\n                      setReserve1(new BigNumber(getBalanceNumber(reserves._reserve1)))\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n  }, [lpTokenContract, stakingTokenAddress])\r\n\r\n  const getApr = useCallback(() => {\r\n    const baseValue = new BigNumber(token0price).times(reserve0)\r\n    const quoteValue = new BigNumber(token1price).times(reserve1)\r\n\r\n    const totalValue = baseValue.plus(quoteValue)\r\n    const lpTokenPrice = totalValue.div(getBalanceNumber(totalSupply)).times(token0price)\r\n\r\n    const apr = getPoolApr(\r\n      lpTokenPrice,\r\n      rewardTokenPrice,\r\n      getBalanceNumber(pool.totalStaked, pool.tokenDecimals),\r\n      parseFloat(pool.tokenPerBlock),\r\n    )\r\n    return new BigNumber(apr);\r\n \r\n}, [pool.tokenDecimals, pool.tokenPerBlock, pool.totalStaked, reserve0, reserve1, rewardTokenPrice, token0price, token1price, totalSupply])\r\n\r\nconst apy = getApr();\r\n\r\n  return (\r\n    <Card\r\n      isActive={isCardActive}\r\n      isFinished={isFinished && sousId !== 0}\r\n      style={{ backdropFilter: 'blur(3px)', background: 'rgba(39, 38, 44, 0.8)' }}\r\n    >\r\n      {isFinished && sousId !== 0 && <PoolFinishedSash />}\r\n      <div style={{ padding: '24px' }}>\r\n        <CardTitle isFinished={isFinished && sousId !== 0}>\r\n          {isOldSyrup && '[OLD]'} {tokenName} {TranslateString(348, 'Pool')}\r\n        </CardTitle>\r\n        <div style={{ marginBottom: '8px', display: 'flex', alignItems: 'center' }}>\r\n          <div style={{ flex: 1 }}>\r\n            <Image src={`/images/tokens/${image || tokenName}.png`} width={64} height={64} alt={tokenName} />\r\n          </div>\r\n          {account && harvest && !isOldSyrup && (\r\n            <HarvestButton\r\n              disabled={!earnings.toNumber() || pendingTx}\r\n              text={pendingTx ? 'Collecting' : 'Harvest'}\r\n              onClick={async () => {\r\n                setPendingTx(true)\r\n                await onReward()\r\n                setPendingTx(false)\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        {!isOldSyrup ? (\r\n          <BalanceAndCompound>\r\n            <Balance value={getBalanceNumber(earnings, tokenDecimals)} isDisabled={isFinished} />\r\n            {sousId === 0 && account && harvest && (\r\n              <HarvestButton\r\n                disabled={!earnings.toNumber() || pendingTx}\r\n                text={pendingTx ? TranslateString(999, 'Compounding') : TranslateString(999, 'Compound')}\r\n                onClick={onPresentCompound}\r\n              />\r\n            )}\r\n          </BalanceAndCompound>\r\n        ) : (\r\n          <OldSyrupTitle hasBalance={accountHasStakedBalance} />\r\n        )}\r\n        <Label isFinished={isFinished && sousId !== 0} text={TranslateString(330, `${tokenName} earned`)} />\r\n        <StyledCardActions>\r\n          {!account && <UnlockButton />}\r\n          {account &&\r\n            (needsApproval && !isOldSyrup ? (\r\n              <div style={{ flex: 1 }}>\r\n                <Button disabled={isFinished || requestedApproval} onClick={handleApprove} fullWidth>\r\n                  {`Approve ${stakingTokenName}`}\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <Button\r\n                  disabled={stakedBalance.eq(new BigNumber(0)) || pendingTx}\r\n                  onClick={\r\n                    isOldSyrup\r\n                      ? async () => {\r\n                          setPendingTx(true)\r\n                          await onUnstake('0')\r\n                          setPendingTx(false)\r\n                        }\r\n                      : onPresentWithdraw\r\n                  }\r\n                >\r\n                  {`Unstake ${stakingTokenName}`}\r\n                </Button>\r\n                <StyledActionSpacer />\r\n                {!isOldSyrup && (\r\n                  <IconButton disabled={isFinished && sousId !== 0} onClick={onPresentDeposit}>\r\n                    <AddIcon color=\"background\" />\r\n                  </IconButton>\r\n                )}\r\n              </>\r\n            ))}\r\n        </StyledCardActions>\r\n        <StyledDetails>\r\n          <div style={{ flex: 1 }}>{TranslateString(736, 'APY')}:</div>\r\n          {isFinished || isOldSyrup || !apy || apy?.isNaN() || !apy?.isFinite() ? (\r\n            '-'\r\n          ) : (\r\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={apy?.toNumber()} decimals={2} unit=\"%\" />\r\n          )}\r\n        </StyledDetails>\r\n        <StyledDetails>\r\n          <div style={{ flex: 1 }}>\r\n            <span role=\"img\" aria-label={stakingTokenName}>\r\n              🥞{' '}\r\n            </span>\r\n            {TranslateString(384, 'Your Stake')}:\r\n          </div>\r\n          <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBalanceNumber(stakedBalance)} />\r\n        </StyledDetails>\r\n      </div>\r\n      <CardFooter\r\n        projectLink={projectLink}\r\n        totalStaked={totalStaked}\r\n        blocksRemaining={blocksRemaining}\r\n        isFinished={isFinished}\r\n        blocksUntilStart={blocksUntilStart}\r\n        poolCategory={poolCategory}\r\n        stakingTokenName={stakingTokenName}\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst PoolFinishedSash = styled.div`\r\n  background-image: url('/images/pool-finished-sash.svg');\r\n  background-position: top right;\r\n  background-repeat: not-repeat;\r\n  height: 135px;\r\n  position: absolute;\r\n  right: -24px;\r\n  top: -24px;\r\n  width: 135px;\r\n`\r\n\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 16px 0;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: row;\r\n`\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledDetails = styled.div`\r\n  display: flex;\r\n  font-size: 14px;\r\n`\r\n\r\nexport default PoolCard\r\n","import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (stakingTokenPrice, rewardTokenPrice, totalStaked, tokenPerBlock) => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (poolWeight, cakePriceUsd, poolLiquidityUsd) => {\r\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\r\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\nexport const getLPprice = async () => {\r\n  const response = await fetch('https://api.pancakeswap.info/api/v2/pairs')\r\n  const data = await response.json()\r\n\r\n  return data.data\r\n}\r\n\r\nexport default null\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst PoolTabButtons = () => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={!isExact ? 1 : 0} size=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(999, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(999, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PoolTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR } from 'config'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useBlock from 'hooks/useBlock'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useFarms, usePriceBnbBusd, usePools, useSTOSPrice } from 'state/hooks'\r\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport Coming from './components/Coming'\r\nimport PoolCard from './components/PoolCard'\r\nimport PoolCardLP from './components/PoolCardLP'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\nconst Farm: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const farms = useFarms()\r\n  const pools = usePools(account)\r\n  const bnbPriceUSD = usePriceBnbBusd()\r\n  const block = useBlock()\r\n  const stosPrice = useSTOSPrice()\r\n\r\n  const priceToBnb = (tokenName: string, tokenPrice: BigNumber, quoteToken: QuoteToken): BigNumber => {\r\n    const tokenPriceBN = new BigNumber(tokenPrice)\r\n    if (tokenName === 'BNB') {\r\n      return new BigNumber(1)\r\n    }\r\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\r\n      return tokenPriceBN.div(bnbPriceUSD)\r\n    }\r\n    return tokenPriceBN\r\n  }\r\n\r\n  const poolsWithApy = pools.map((pool) => {\r\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE\r\n    // const rewardTokenFarm = farms.find((f) => f.tokenSymbol === pool.quoteTokenSymbol)\r\n    // const stakingTokenFarm = farms.find((s) => s.tokenAddresses[CHAIN_ID] === pool.quoteTokenAdresses[CHAIN_ID])\r\n\r\n    // /!\\ Assume that the farm quote price is BNB\r\n    // const stakingTokenPriceInBNB = isBnbPool ? new BigNumber(1) : new BigNumber(stakingTokenFarm?.tokenPriceVsQuote)\r\n    // const rewardTokenPriceInBNB = priceToBnb(\r\n    //   pool.tokenName,\r\n    //   rewardTokenFarm?.tokenPriceVsQuote,\r\n    //   rewardTokenFarm?.quoteTokenSymbol,\r\n    // )\r\n\r\n    const rewardTokenPrice = new BigNumber(1)\r\n    const stakingTokenPrice = new BigNumber(1)\r\n\r\n    const totalRewardPricePerYear = rewardTokenPrice.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n    const totalStakingTokenInPool = stakingTokenPrice.times(getBalanceNumber(pool.totalStaked))\r\n    const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n\r\n    return {\r\n      ...pool,\r\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\r\n      apy,\r\n    }\r\n  })\r\n\r\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <div>\r\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\" style={{ color: 'orange' }}>\r\n            {TranslateString(282, 'Earn SafeSTOS')}\r\n          </Heading>\r\n        </div>\r\n      </Hero>\r\n      <PoolTabButtons />\r\n      <Divider />\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {orderBy(openPools, ['sortOrder']).map((pool) => {\r\n            if (pool.earningToken === pool.stakingTokenAddress) {\r\n              return <PoolCard key={pool.sousId} pool={pool} />\r\n            }\r\n            return <PoolCardLP key={pool.sousId} pool={pool} />\r\n          })}\r\n        </Route>\r\n        <Route path={`${path}/history`}>\r\n          {orderBy(finishedPools, ['sortOrder']).map((pool) => {\r\n            if (pool.earningToken === pool.stakingTokenAddress) {\r\n              return <PoolCard key={pool.sousId} pool={pool} />\r\n            }\r\n            return <PoolCardLP key={pool.sousId} pool={pool} />\r\n          })}\r\n        </Route>\r\n      </FlexLayout>\r\n    </Page>\r\n  )\r\n}\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 250px;\r\n  padding: 48px 0;\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style-type: none;\r\n    font-size: 16px;\r\n    li {\r\n      margin-bottom: 4px;\r\n    }\r\n  }\r\n  img {\r\n    height: auto;\r\n    max-width: 100%;\r\n  }\r\n  @media (min-width: 576px) {\r\n    grid-template-columns: 1fr 1fr;\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\n\r\nexport default Farm\r\n"],"sourceRoot":""}