{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","StyledCakeStats","styled","Card","Row","div","CakeStats","TranslateString","totalSupply","useTotalSupplyPrice","farms","useFarms","marketCap","useSTOSPrice","times","lifePerBlock","BigNumber","pow","toNumber","size","mb","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","height","chrome","width","Hero","theme","mediaQueries","lg","Cards","BaseLayout","sm","CustomText","Text","Home","Page","as","color"],"mappings":"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","file":"static/js/18.13ec09d0.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport CardValue from './CardValue'\nimport { useFarms, useSTOSPrice, useTotalSupplyPrice } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  backdrop-filter: blur(3px);\n  background: rgba(39, 38, 44, 0.8);\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupplyPrice()\n  const farms = useFarms()\n  const price = useSTOSPrice()\n  const marketCap = price.times(totalSupply)\n\n  let eggPerBlock = 0\n  if (farms && farms[0] && farms[0].lifePerBlock) {\n    eggPerBlock = new BigNumber(farms[0].lifePerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'STOS Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={marketCap.toNumber()} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={0} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={0} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={totalSupply.toNumber()} decimals={0} />}\n        </Row>\n        <Row>\n          {/* <Text fontSize=\"14px\">{TranslateString(540, 'New STOS/block')}</Text>\n          <Text bold fontSize=\"14px\">\n            {0}\n          </Text> */}\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  backdrop-filter: blur(3px);\n  background: rgba(39, 38, 44, 0.8);\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'safestos',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CustomText = styled(Text)`\n  color: orange;\n  font-size: 30px;\n  text-shadow: 2px 2px 2px #000;\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'STOS Entertainment')}\n        </Heading>\n        <CustomText fontSize=\"24px\">\n          {TranslateString(\n            578,\n            'A global NFT hospitality project, curating unique entertainment experiences for our NFT & Token holders.',\n          )}\n        </CustomText>\n      </Hero>\n      <div>\n        <Cards>\n          {/* <FarmStakingCard /> */}\n          <TwitterCard />\n          <CakeStats />\n          {/* <TotalValueLockedCard /> */}\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}