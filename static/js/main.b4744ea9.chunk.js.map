{"version":3,"sources":["state/stos/index.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/index.ts","state/prices/index.ts","contexts/Localisation/translationsContext.ts","components/layout/Page.tsx","contexts/BlockContext.tsx","config/constants/types.ts","components/layout/Container.tsx","utils/multicall.ts","utils/addressHelpers.ts","config/constants/contracts.ts","config/constants/pools.ts","config/constants/farms.ts","state/pools/fetchPools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","Providers.tsx","index.tsx","utils/web3.ts","state/actions.ts","state/hooks.ts","hooks/useRefresh.ts"],"names":["stosSlice","createSlice","name","initialState","data","price","totalSupply","reducers","setPriceData","state","action","priceData","payload","setTotalSupplyData","totalSupplyData","actions","fetchPriceDataAsync","dispatch","a","STOSValue","fetch","then","res","json","result","status","error","catch","fetchTotalSupplyDataAsync","totalSupplyValue","fetchFarms","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","lifePerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","farmsSlice","setFarmsPublicData","liveFarmsData","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","fetchFarmsPublicDataAsync","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","nodes","process","getNodeUrl","randomIndex","random","length","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","Provider","value","store","configureStore","devTools","reducer","farmsReducer","pools","poolsReducer","stos","stosReducer","prices","pricesReducer","useAppDispatch","useDispatch","fetchPrices","createAsyncThunk","response","updated_at","Object","keys","reduce","accum","token","toLowerCase","parseFloat","pricesSlice","isLoading","lastUpdated","extraReducers","builder","addCase","pending","fulfilled","defaultTranslationState","translations","setTranslations","TranslationsContext","Page","styled","Container","theme","mediaQueries","sm","lg","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getWeb3","eth","getBlockNumber","blockNumber","current","PoolCategory","abi","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","encodeFunctionData","methods","aggregate","returnData","i","decodeFunctionResult","getCakeAddress","addresses","cake","chainId","masterChef","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","getLifeAddress","life","56","97","busd","sousId","tokenName","stakingTokenName","STOS","earningToken","stakingTokenAddress","contractAddress","poolCategory","COMMUNITY","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","contracts","STOSBNB","risk","lpSymbol","BNB","fetchPoolsBlockLimits","poolsWithEnd","poolsConfig","filter","p","callsStartBlock","poolConfig","callsEndBlock","sousChefABI","starts","ends","cakePoolConfig","startBlock","endBlock","fetchPoolsTotalStatking","nonBnbPools","bnbPool","callsNonBnbPools","callsBnbPools","cakeABI","nonBnbPoolsTotalStaked","wbnbABI","bnbPoolsTotalStaked","totalStaked","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingLife","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsPublicDataAsync","blockLimits","totalStakings","liveData","blockLimit","totalStaking","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","r","translationApiResponse","e","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","setIsDark","prevState","JSON","stringify","dark","light","useTheme","useContext","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","useSTOSPrice","login","logout","currentLang","langs","setLang","cakePriceUsd","links","Wrapper","PageLoader","Home","lazy","Lottery","Pools","NotFound","Nft","Detail","MyCollection","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","useFetchPublicData","useFetchPriceData","useFetchTotalSupplyData","Global","fallback","path","exact","component","memo","Providers","rpcUrl","getRpcUrl","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","ZERO","slowRefresh","useRefresh","useFarms","useSelector","useFarmFromPid","usePools","fastRefresh","usePriceBnbBusd","useTotalSupplyPrice"],"mappings":"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","file":"static/js/main.b4744ea9.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport { StosState } from '../types'\r\n\r\nconst initialState: StosState = { data: { price: 0, totalSupply: 0 } }\r\n\r\nexport const stosSlice = createSlice({\r\n  name: 'Stos',\r\n  initialState,\r\n  reducers: {\r\n    setPriceData: (state, action) => {\r\n      const priceData = action.payload\r\n      return { data: { ...state.data, price: priceData } }\r\n    },\r\n    setTotalSupplyData: (state, action) => {\r\n      const totalSupplyData = action.payload\r\n      return { data: { ...state.data, totalSupply: totalSupplyData } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPriceData, setTotalSupplyData } = stosSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPriceDataAsync = () => async (dispatch) => {\r\n  let STOSValue = 0\r\n  await fetch(\r\n    'https://api.stosentertainment.com/price-bnbpool.php?key=236547643&pool=0xe0e3f3698ba35487e5285fdfd31a5b8d8f564d8b&token=0x9eab0a93b0cd5d904493694f041bdcedb97b88c6&decimals=18',\r\n  )\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status === true) {\r\n          STOSValue = result.data\r\n        } else {\r\n          STOSValue = 0\r\n        }\r\n      },\r\n      (error) => {\r\n        STOSValue = 0\r\n      },\r\n    )\r\n    .catch(() => {\r\n      STOSValue = 0\r\n    })\r\n  dispatch(setPriceData(STOSValue))\r\n}\r\n\r\nexport const fetchTotalSupplyDataAsync = () => async (dispatch) => {\r\n  let totalSupplyValue = 0\r\n  await fetch(\r\n    'https://api.bscscan.com/api?module=stats&action=tokenCsupply&contractaddress=0x9eab0a93b0cd5d904493694f041bdcedb97b88c6&apikey=5E61V2DWBJANXNURC6Q991F828E6W5KX1P&decimals=18',\r\n  )\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status === '1') {\r\n          totalSupplyValue = result.result / 10 ** 18\r\n        } else {\r\n          totalSupplyValue = 0\r\n        }\r\n      },\r\n      (error) => {\r\n        totalSupplyValue = 0\r\n      },\r\n    )\r\n    .catch(() => {\r\n      totalSupplyValue = 0\r\n    })\r\n  dispatch(setTotalSupplyData(totalSupplyValue))\r\n}\r\n\r\nexport default stosSlice.reducer\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\n// const web3 = require('web3');\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals,\r\n      ] = await multicall(erc20, calls)\r\n\r\n      let tokenAmount\r\n      let lpTotalInQuoteToken\r\n      let tokenPriceVsQuote\r\n      if (farmConfig.isTokenOnly) {\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\r\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          tokenPriceVsQuote = new BigNumber(1)\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\r\n      } else {\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(18))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if (tokenAmount.comparedTo(0) > 0) {\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n      }\r\n\r\n      const [info, totalAllocPoint, lifePerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'lifePerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        lifePerBlock: new BigNumber(lifePerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingLife',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { useDispatch } from 'react-redux'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\nimport pricesReducer from './prices'\r\nimport stosReducer from './stos'\r\n\r\nconst store = configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n    stos: stosReducer,\r\n    prices: pricesReducer,\r\n  },\r\n})\r\n\r\n/**\r\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\r\n */\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport default store\r\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { PriceApiResponse, PriceApiThunk, PriceState } from 'state/types'\r\n\r\nconst initialState: PriceState = {\r\n  isLoading: false,\r\n  lastUpdated: null,\r\n  data: null,\r\n}\r\n\r\n// Thunks\r\nexport const fetchPrices = createAsyncThunk<PriceApiThunk>('prices/fetch', async () => {\r\n  const response = await fetch('https://api.pancakeswap.info/api/v2/tokens')\r\n  const data = (await response.json()) as PriceApiResponse\r\n  // Return normalized token names\r\n  return {\r\n    updated_at: data.updated_at,\r\n    data: Object.keys(data.data).reduce((accum, token) => {\r\n      return {\r\n        ...accum,\r\n        [token.toLowerCase()]: parseFloat(data.data[token].price),\r\n      }\r\n    }, {}),\r\n  }\r\n})\r\n\r\nexport const pricesSlice = createSlice({\r\n  name: 'prices',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchPrices.pending, (state) => {\r\n      state.isLoading = true\r\n    })\r\n    builder.addCase(fetchPrices.fulfilled, (state, action: PayloadAction<PriceApiThunk>) => {\r\n      state.isLoading = false\r\n      state.lastUpdated = action.payload.updated_at\r\n      state.data = action.payload.data\r\n    })\r\n  },\r\n})\r\n\r\nexport default pricesSlice.reducer\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n  'STOS' = 'STOS',\r\n  'STOSBNB' = 'STOS-BNB',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  earningToken?: string\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n  quoteTokenSymbol: string\r\n  quoteTokenAdresses: { 56: string; 97: string }\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  metadata: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  fileType: string\r\n  nftId: number\r\n  tokenAmount: number\r\n  tokenSupply: number\r\n  nftFarmContract: string\r\n  nftContract: string\r\n  active: boolean\r\n}\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\nexport const getLifeAddress = () => {\r\n  return addresses.life[chainId]\r\n}\r\n","export default {\r\n  cake: {\r\n    56: '0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\r\n    97: '0xADA2270B0CB5b6254d3d48A6fEE55b72693B746A',\r\n  },\r\n  masterChef: {\r\n    56: '0x67905ff1Ada0C11720E7298840206E5bdB8d3646',\r\n    97: '0xE37Aa693d2Ab77721E11e55bfBC723cf4457b78E',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n  },\r\n  lottery: {\r\n    56: '0x9de6d3B14a7A3ca601bC4204d7e74d9C4c5aaa96',\r\n    97: '0x6B778b75b3D514D5019dCC2C00B298407F615b5e',\r\n  },\r\n  lotteryNFT: {\r\n    56: '0x822eEF180b91c7df5f68A17B62D3d406f0F4a332',\r\n    97: '0x66aDE41CCeB4D3D63A29d256264D13328F84d9D6',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee',\r\n  },\r\n  life: {\r\n    56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n    97: '0xADA2270B0CB5b6254d3d48A6fEE55b72693B746A',\r\n  },\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\nimport contracts from './contracts'\r\n\r\nconst pools: PoolConfig[] = [\r\n  {\r\n    sousId: 2,\r\n    tokenName: 'STOS',\r\n    stakingTokenName: QuoteToken.STOS,\r\n    earningToken: '0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\r\n    stakingTokenAddress: '0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\r\n    contractAddress: {\r\n      97: '0x52B0b88b172E0b21f0558605496Ab46bb1Ce0557',\r\n      56: '0x0a886563c8741A4d08599bB91ee31d67e79567E8',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    projectLink: 'https://stos.finance/',\r\n    harvest: true,\r\n    tokenPerBlock: '0.000459896',\r\n    sortOrder: 1,\r\n    isFinished: false,\r\n    tokenDecimals: 18,\r\n    quoteTokenSymbol: QuoteToken.STOS,\r\n    quoteTokenAdresses: contracts.cake,\r\n  },\r\n  {\r\n    sousId: 3,\r\n    tokenName: 'STOS',\r\n    stakingTokenName: QuoteToken.STOSBNB,\r\n    earningToken: '0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\r\n    stakingTokenAddress: '0xe0E3F3698ba35487e5285fDfd31a5B8d8F564D8b',\r\n    contractAddress: {\r\n      97: '0x52B0b88b172E0b21f0558605496Ab46bb1Ce0557',\r\n      56: '0x4c55A4D6b9B0F27B45a6c88c2f6D306511FA28a0',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    projectLink: 'https://stos.finance/',\r\n    harvest: true,\r\n    tokenPerBlock: '0.000689845',\r\n    sortOrder: 2,\r\n    isFinished: false,\r\n    tokenDecimals: 18,\r\n    quoteTokenSymbol: QuoteToken.STOSBNB,\r\n    quoteTokenAdresses: contracts.cake,\r\n  },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'TWT',\r\n  //   stakingTokenName: QuoteToken.SYRUP,\r\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n  //   contractAddress: {\r\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://trustwallet.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '20',\r\n  //   sortOrder: 999,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    pid: 0,\r\n    risk: 5,\r\n    lpSymbol: 'STOS-BUSD LP',\r\n    lpAddresses: {\r\n      97: '0xE2115e605a81dc6CB448f5111DE6bEf5B8a760DA',\r\n      56: '0x5eE167b75118125e7d46add5cE61F749BB977A00',\r\n    },\r\n    tokenSymbol: 'STOS',\r\n    tokenAddresses: {\r\n      97: '0xADA2270B0CB5b6254d3d48A6fEE55b72693B746A',\r\n      56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 1,\r\n    risk: 5,\r\n    lpSymbol: 'STOS-BNB LP',\r\n    lpAddresses: {\r\n      97: '0x197885A5af8ffdC945f2c5677A6E0F3A84C141A2',\r\n      56: '0x45b2eF2ECe32b34D20F6C6caD49043740B05f2A5',\r\n    },\r\n    tokenSymbol: 'STOS',\r\n    tokenAddresses: {\r\n      97: '0xADA2270B0CB5b6254d3d48A6fEE55b72693B746A',\r\n      56: '0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n\r\n  {\r\n    pid: 2,\r\n    risk: 3,\r\n    lpSymbol: 'BNB-BUSD LP',\r\n    lpAddresses: {\r\n      97: '0xa75c80e7Ca70505AAB6062cF15A2cFC71b6138C0',\r\n      56: '0x1B96B92314C44b159149f7E0303511fB2Fc4774f',\r\n    },\r\n    tokenSymbol: 'BUSD',\r\n    tokenAddresses: {\r\n      97: '0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee',\r\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n]\r\n\r\nexport default farms\r\n","import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport wbnbABI from 'config/abi/weth.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getWbnbAddress } from 'utils/addressHelpers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'startBlock',\r\n    }\r\n  })\r\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'bonusEndBlock',\r\n    }\r\n  })\r\n\r\n  const starts = await multicall(sousChefABI, callsStartBlock)\r\n  const ends = await multicall(sousChefABI, callsEndBlock)\r\n\r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const startBlock = starts[index]\r\n    const endBlock = ends[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      startBlock: new BigNumber(startBlock).toJSON(),\r\n      endBlock: new BigNumber(endBlock).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsTotalStatking = async () => {\r\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\n  const bnbPool = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\n\r\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.stakingTokenAddress,\r\n      name: 'balanceOf',\r\n      params: [poolConfig.contractAddress[CHAIN_ID]],\r\n    }\r\n  })\r\n\r\n  const callsBnbPools = bnbPool.map((poolConfig) => {\r\n    return {\r\n      address: getWbnbAddress(),\r\n      name: 'balanceOf',\r\n      params: [poolConfig.contractAddress[CHAIN_ID]],\r\n    }\r\n  })\r\n\r\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\r\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\r\n\r\n  return [\r\n    ...nonBnbPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n    ...bnbPool.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n  ]\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingLife('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Actor', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  ZHCN,\r\n  ZHTW,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then((r) => r.json())\r\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error('ERROR')\r\n          console.error(e)\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    return true\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Buy SafeSTOS',\r\n        href: 'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'https://exchange.pancakeswap.finance/#/pool',\r\n      },\r\n    ],\r\n  },\r\n  // {\r\n  //   label: 'Farms',\r\n  //   icon: 'FarmIcon',\r\n  //   href: '/farms',\r\n  // },\r\n  {\r\n    label: 'Earn SafeSTOS',\r\n    icon: 'PoolIcon',\r\n    href: '/pools',\r\n  },\r\n  {\r\n    label: 'Lottery',\r\n    icon: 'TicketIcon',\r\n    href: '/lottery',\r\n  },\r\n  {\r\n    label: 'NFT',\r\n    icon: 'NftIcon',\r\n    href: '/nft',\r\n  },\r\n  {\r\n    label: 'My NFT Collection',\r\n    icon: 'NftIcon',\r\n    href: '/my-collection',\r\n  },\r\n  {\r\n    label: 'Info',\r\n    icon: 'InfoIcon',\r\n    items: [\r\n      {\r\n        label: 'Bscscan',\r\n        href: 'https://bscscan.com/token/0x9eab0a93b0cd5d904493694f041bdcedb97b88c6',\r\n      },\r\n      {\r\n        label: 'Chart',\r\n        href: 'https://dex.guru/token/0x9eab0a93b0cd5d904493694f041bdcedb97b88c6-bsc',\r\n      },\r\n      {\r\n        label: 'Coingecko Coming Soon',\r\n        href: '#',\r\n      },\r\n      {\r\n        label: 'CoinMarketCap Coming Soon',\r\n        href: '#',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'More',\r\n    icon: 'MoreIcon',\r\n    items: [\r\n      {\r\n        label: 'Github',\r\n        href: 'https://github.com/stosent/',\r\n      },\r\n      {\r\n        label: 'Medium',\r\n        href: 'https://stos-entertainment-co.medium.com/',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Gordian Audit Passed',\r\n    icon: 'AuditIcon',\r\n    href: 'https://gordian.agency/',\r\n  },\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useSTOSPrice } from 'state/hooks'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\nimport 'antd/dist/antd.css'\r\nimport './style.css'\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const STOSValue = useSTOSPrice()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      cakePriceUsd={STOSValue.toNumber()}\r\n      links={config}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData, useFetchPriceData, useFetchTotalSupplyData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\n// import NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\n// const Farms = lazy(() => import('./views/Farms'))\r\nconst Lottery = lazy(() => import('./views/Lottery'))\r\nconst Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\nconst Nft = lazy(() => import('./views/Nft'))\r\nconst Detail = lazy(() => import('./views/Detail'))\r\nconst MyCollection = lazy(() => import('./views/MyCollection'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  useFetchPriceData()\r\n\r\n  useFetchTotalSupplyData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            {/* <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/nests\">\r\n              <Farms tokenMode />\r\n            </Route> */}\r\n            <Route path=\"/pools\">\r\n              <Pools />\r\n            </Route>\r\n            <Route path=\"/lottery\">\r\n              <Lottery />\r\n            </Route>\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            <Route path=\"/nft\">\r\n              <Nft />\r\n            </Route>\r\n            <Route path=\"/detail/:id\" component={Detail} />\r\n            <Route path=\"/my-collection\">\r\n              <MyCollection />\r\n            </Route>\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n\r\n      {/* <NftGlobalNotification /> */}\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport { fetchPriceDataAsync, fetchTotalSupplyDataAsync } from './stos'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  fetchFarmsPublicDataAsync,\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  fetchPriceDataAsync,\r\n  fetchTotalSupplyDataAsync,\r\n} from './actions'\r\nimport { State, Farm, Pool, PriceState } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\nimport { fetchPrices } from './prices'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// For Price\r\nexport const useFetchPriceData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchPriceDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// For Total Supply\r\nexport const useFetchTotalSupplyData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchTotalSupplyDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 2 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const useFetchPriceList = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPrices())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\nexport const useGetApiPrices = () => {\r\n  const prices: PriceState['data'] = useSelector((state: State) => state.prices.data)\r\n  return prices\r\n}\r\n\r\nexport const useGetApiPrice = (address: string) => {\r\n  const prices = useGetApiPrices()\r\n\r\n  if (!prices) {\r\n    return null\r\n  }\r\n\r\n  return prices[address.toLowerCase()]\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  const cakeBnbFarm = useFarmFromPid(1)\r\n  const bnbBusdFarm = useFarmFromPid(2)\r\n\r\n  const bnbBusdPrice = bnbBusdFarm.tokenPriceVsQuote ? new BigNumber(1).div(bnbBusdFarm.tokenPriceVsQuote) : ZERO\r\n  const cakeBusdPrice = cakeBnbFarm.tokenPriceVsQuote ? bnbBusdPrice.times(cakeBnbFarm.tokenPriceVsQuote) : ZERO\r\n\r\n  return cakeBusdPrice\r\n}\r\n\r\nexport const useSTOSPrice = (): BigNumber => {\r\n  const { price } = useSelector((state: State) => state.stos.data)\r\n  return price ? new BigNumber(price) : ZERO\r\n}\r\n\r\nexport const useTotalSupplyPrice = (): BigNumber => {\r\n  const { totalSupply } = useSelector((state: State) => state.stos.data)\r\n  return totalSupply ? new BigNumber(totalSupply) : ZERO\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const cakePrice = usePriceCakeBusd()\r\n  let value = new BigNumber(0)\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\r\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\r\n      } else {\r\n        val = farm.lpTotalInQuoteToken\r\n      }\r\n      value = value.plus(val)\r\n    }\r\n  }\r\n  return value\r\n}\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n"],"sourceRoot":""}