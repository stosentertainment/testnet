{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","hooks/useWeb3.ts","config/constants/index.ts","hooks/useContract.ts","utils/formatBalance.ts","utils/callHelpers.ts","hooks/useBlock.ts","hooks/useApprove.ts","components/UnlockButton.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","config/index.ts","components/Input/Input.tsx","components/layout/Flex.tsx","components/Label/Label.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","components/Balance.tsx","components/TokenInput/TokenInput.tsx","views/Pools/components/DepositModal.tsx","views/Pools/components/WithdrawModal.tsx","views/Pools/components/CompoundModal.tsx","views/Pools/components/CardTitle.tsx","views/Pools/components/Card.tsx","views/Pools/components/OldSyrupTitle.tsx","views/Pools/components/HarvestButton.tsx","views/Pools/components/CardFooter.tsx","components/Tags.tsx","views/Pools/components/PoolCard.tsx","utils/apr.js","views/Pools/components/PoolCardLP.tsx","views/Pools/components/PoolTabButtons/index.tsx","views/Pools/components/Divider.tsx","views/Pools/Syrup.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useERC20","erc20","useCake","getCakeAddress","useRabbitMintingFarm","nftFarm","usePancakeRabbits","nft","useNFTFarmContract","useLottery","lottery","getLotteryAddress","useLotteryTicket","lotteryTicket","getLotteryTicketAddress","useMasterchef","masterChef","getMasterChefAddress","useLP","univ2lp","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useBlock","BlockContext","useSousApprove","dispatch","useDispatch","onApprove","useCallback","updateUserAllowance","useLotteryApprove","cakeContract","lotteryContract","useNftApprove","tokenContract","spenderAddress","UnlockButton","props","TranslateString","connect","reset","onPresentConnectModal","useWalletModal","onClick","StyledSpacer","styled","div","size","Spacer","s","spacing","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","child","i","EXPONENTIAL_AT","DECIMAL_PLACES","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","FlexLayout","StyledLabel","isFinished","Label","useSousStake","isUsingBnb","handleStake","updateUserStakedBalance","updateUserBalance","onStake","SYRUPIDS","useSousUnstake","isOldSyrup","onUnstake","txHash","console","info","updateUserPendingReward","useSousHarvest","handleHarvest","onReward","StyledText","Text","isDisabled","color","textDisabled","Balance","fontSize","unit","previousValue","bold","start","end","duration","separator","defaultProps","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","e","currentTarget","handleSelectMax","title","fullWidth","variant","disabled","WithdrawModal","CompoundModal","earnings","BalanceRow","Number","CardTitle","Card","card","background","isActive","Title","ActionLink","OldSyrupTitle","hasBalance","href","target","StyledButton","button","padding","undefined","StyledLink","Link","StyledExternalLink","Button","buttonSize","buttonPadding","to","buttonColor","ButtonChild","boxShadow","tags","outline","startIcon","CORE","COMMUNITY","StyledFooter","isDark","StyledDetailsButton","Details","Row","FlexFull","TokenLink","CardFooter","projectLink","totalStaked","blocksRemaining","blocksUntilStart","stakingTokenName","isOpen","setIsOpen","Icon","ChevronUp","ChevronDown","Tag","style","marginBottom","role","aria-label","memo","PoolFinishedSash","StyledCardActions","BalanceAndCompound","StyledActionSpacer","StyledDetails","PoolCard","image","stakingTokenAddress","apy","tokenDecimals","startBlock","endBlock","userData","stakingLimit","isBnbPool","stakingTokenContract","block","requestedApproval","setRequestedApproval","allowance","stakingTokenBalance","stakedBalance","pendingReward","Math","QuoteToken","SYRUP","accountHasStakedBalance","needsApproval","isCardActive","convertedLimit","multipliedBy","useModal","isGreaterThan","onPresentDeposit","onPresentCompound","onPresentWithdraw","handleApprove","error","backdropFilter","display","alignItems","flex","src","width","height","alt","HarvestButton","eq","isNaN","isFinite","getLPprice","fetch","response","json","tokenPerBlock","lpTokenContract","setAPY","totalSupply","setTotalSupply","reserve0","setReserve0","reserve1","setReserve1","token0","setToken0","token1","setToken1","token0price","useFarms","useSTOSPrice","token1price","usePriceBnbBusd","rewardTokenPrice","call","then","res0","res1","res2","getReserves","reserves","_reserve0","_reserve1","concat","baseValue","quoteValue","apr","stakingTokenPrice","totalRewardPricePerYear","totalStakingTokenInPool","getPoolApr","plus","parseFloat","PoolTabButtons","useRouteMatch","url","isExact","Wrapper","activeIndex","as","textSubtle","Hero","Farm","path","pools","usePools","poolsWithApy","partition","finishedPools","openPools","Page","mb","Divider","Flex","exact","orderBy","earningToken","PoolCardLP"],"mappings":"+IAGMA,EAAgB,UASTC,EAAiB,SAACC,EAA0BC,EAAuBC,GAC9E,IAAMC,EAAmBH,EAAaI,MAAK,SAACC,GAC1C,OAAOA,EAAYC,KAAKC,WAAaN,KAEvC,GAAIE,EAAkB,CACpB,IAAMK,EAAmBL,EAAiBG,KAAKG,KAE/C,OADyBD,EAAiBE,SAAS,KAb1B,SAACP,EAA0BD,GACtD,IAAMS,EAAkBb,EAAcc,KAAKT,GAAkB,GAEvDU,EAAuBX,EAASY,MAAM,KAAK,GACjD,OAAOX,EAAiBY,QAAQJ,EAAiBE,GAWtCG,CAAqBR,EAAkBN,GAEzCM,EAET,OAAON,GCNMe,IAdC,WAAO,IACbjB,EAAiBkB,qBAAWC,KAA5BnB,aAER,OAAO,SAACC,EAAuBC,GAC7B,MAAwB,UAApBF,EAAa,GACRE,EAELF,EAAaoB,OAAS,EACjBrB,EAAeC,EAAcC,EAAeC,GAE9CA,K,2aCPLmB,EAAUC,cACVC,EAAe,IAAIC,IAAKC,UAAUC,aAAaL,EAAS,CAAEM,QAAS,MAsB1DC,EAfC,WAAO,IACbC,EAAyCC,cAAzCD,SACFE,EAASC,iBAAOH,GAFF,EAGII,mBAAS,IAAIT,IAAKK,GAAYN,IAHlC,mBAGbW,EAHa,KAGPC,EAHO,KAYpB,OAPAC,qBAAU,WACJP,IAAaE,EAAOM,UACtBF,EAAQ,IAAIX,IAAKK,GAAYN,IAC7BQ,EAAOM,QAAUR,KAElB,CAACA,IAEGK,G,2BCzBcI,IAAYC,QAAO,SAACC,GAAD,OAAUA,EAAKC,eAAaC,KAAI,SAACF,GAAD,OAAUA,EAAKG,e,8FCgBnFC,EAAc,SAACC,EAAcC,EAAiBC,GAClD,IAAMb,EAAON,IAD2E,EAExDK,mBAAS,IAAIC,EAAKc,IAAIC,SAASJ,EAAKC,EAASC,IAFW,mBAEjFG,EAFiF,KAEvEC,EAFuE,KAQxF,OAJAf,qBAAU,WACRe,EAAY,IAAIjB,EAAKc,IAAIC,SAASJ,EAAKC,EAASC,MAC/C,CAACF,EAAKC,EAASC,EAAiBb,IAE5BgB,GAYIE,EAAW,SAACN,GAEvB,OAAOF,EADWS,EACWP,IAGlBQ,EAAU,WACrB,OAAOF,EAASG,gBAGLC,EAAuB,SAACV,GAEnC,OAAOF,EADoBa,EACWX,IAG3BY,EAAoB,SAACZ,GAEhC,OAAOF,EADSe,EACWb,IAGhBc,EAAqB,SAACd,GAEjC,OAAOF,EADaa,EACWX,IAGpBe,EAAa,WAExB,OAAOjB,EADMkB,EACWC,gBAGbC,EAAmB,WAE9B,OAAOpB,EADMqB,EACWC,gBAGbC,EAAgB,WAE3B,OAAOvB,EADMwB,EACWC,gBAGbC,EAAQ,SAACxB,GAEpB,OAAOF,EADQ2B,EACWzB,IAGf0B,EAAc,SAACC,GAC1B,IAAMC,EAASC,IAAYvE,MAAK,SAACwE,GAAD,OAAUA,EAAKC,SAAWJ,KACpDK,EAASJ,EAAOK,eAAiBC,IAAaC,QAAUC,EAAcC,EAE5E,OAAOvC,EADMkC,EACWJ,EAAOU,gBAAgBC,O,iCCtFjD,yFAEaC,EAAmB,SAACC,GAAuC,IAAnBC,EAAkB,uDAAP,GACxDC,EAAiB,IAAIC,IAAUH,GAASI,UAAU,IAAID,IAAU,IAAIE,IAAIJ,IAC9E,OAAOC,EAAeI,YAGXC,EAAwB,SAACP,GAAuC,IAAnBC,EAAkB,uDAAP,GACnE,OAAOD,EAAQI,UAAU,IAAID,IAAU,IAAIE,IAAIJ,IAAWO,Y,83WCL/CC,EAAO,uCAAG,WAAOC,EAAYC,EAAoBC,GAAvC,SAAAC,EAAA,+EACdH,EAAWI,QACfL,QAAQE,EAAmBI,QAAQxD,QAASyD,SAAOC,UAAUC,YAC7DC,KAAK,CAAEC,KAAMR,KAHK,2CAAH,0DAMPS,EAAK,uCAAG,WAAOV,EAAoBW,EAAKC,EAAQX,GAAxC,SAAAC,EAAA,+EACZF,EAAmBG,QACvBU,QAAQF,EAAK,IAAInB,IAAUoB,GAAQE,MAAM,IAAItB,IAAU,IAAIE,IAAI,KAAKqB,YACpEP,KAAK,CAAEC,KAAMR,IACbe,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALK,2CAAH,4DASLC,EAAS,uCAAG,WAAOC,EAAkBR,EAAQX,GAAjC,SAAAC,EAAA,+EAChBkB,EAAiBjB,QACrBU,QAAQ,IAAIrB,IAAUoB,GAAQE,MAAM,IAAItB,IAAU,IAAIE,IAAI,KAAKqB,YAC/DP,KAAK,CAAEC,KAAMR,IACbe,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALS,2CAAH,0DASTG,EAAY,uCAAG,WAAOD,EAAkBR,EAAQX,GAAjC,SAAAC,EAAA,+EACnBkB,EAAiBjB,QACrBU,UACAL,KAAK,CAAEC,KAAMR,EAASqB,MAAO,IAAI9B,IAAUoB,GAAQE,MAAM,IAAItB,IAAU,IAAIE,IAAI,KAAKqB,aACpFC,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALY,2CAAH,0DASZK,EAAO,uCAAG,WAAOvB,EAAoBW,EAAKC,EAAQX,GAAxC,SAAAC,EAAA,+EACdF,EAAmBG,QACvBqB,SAASb,EAAK,IAAInB,IAAUoB,GAAQE,MAAM,IAAItB,IAAU,IAAIE,IAAI,KAAKqB,YACrEP,KAAK,CAAEC,KAAMR,IACbe,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALO,2CAAH,4DASPO,EAAW,uCAAG,WAAOL,EAAkBR,EAAQX,GAAjC,SAAAC,EAAA,yDAEgB,+CAArCkB,EAAiBhB,QAAQxD,QAFJ,yCAGhBwE,EAAiBjB,QACrBuB,oBACAlB,KAAK,CAAEC,KAAMR,IACbe,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBAPS,UAUgB,+CAArCE,EAAiBhB,QAAQxD,QAVJ,yCAWhBwE,EAAiBjB,QACrBuB,oBACAlB,KAAK,CAAEC,KAAMR,IACbe,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBAfS,gCAkBlBE,EAAiBjB,QACrBqB,SAAS,IAAIhC,IAAUoB,GAAQE,MAAM,IAAItB,IAAU,IAAIE,IAAI,KAAKqB,YAChEP,KAAK,CAAEC,KAAMR,IACbe,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBAtBW,2CAAH,0DA0BXS,EAAmB,uCAAG,WAAOP,EAAkBR,EAAQX,GAAjC,SAAAC,EAAA,+EAC1BkB,EAAiBjB,QACrBuB,oBACAlB,KAAK,CAAEC,KAAMR,IACbe,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALmB,2CAAH,0DASnBU,EAAO,uCAAG,WAAO5B,EAAoBW,EAAKV,GAAhC,SAAAC,EAAA,+EACdF,EAAmBG,QACvBU,QAAQF,EAAK,KACbH,KAAK,CAAEC,KAAMR,IACbe,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALO,2CAAH,0DASPW,EAAY,uCAAG,WAAOT,EAAkBnB,GAAzB,SAAAC,EAAA,+EACnBkB,EAAiBjB,QACrBU,QAAQ,KACRL,KAAK,CAAEC,KAAMR,IACbe,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALY,2CAAH,wDASZY,EAAe,uCAAG,WAAOV,EAAkBnB,GAAzB,SAAAC,EAAA,+EACtBkB,EAAiBjB,QACrBU,UACAL,KAAK,CAAEC,KAAMR,EAASqB,MAAO,IAAI9B,IAAU,KAC3CwB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALe,2CAAH,yD,iCClG5B,oBAQea,IALE,WAEf,OADsB/G,qBAAWgH,O,mhPCyBtBC,EAAiB,SAAClC,EAAsBpB,GACnD,IAAMuD,EAAWC,cACTlC,EAAiCrE,cAAjCqE,QACFmB,EAAmB9C,YAAYK,GAYrC,MAAO,CAAEyD,UAVaC,sBAAW,sBAAC,4BAAAnC,EAAA,+EAEbJ,YAAQC,EAAYqB,EAAkBnB,GAFzB,cAExBgB,EAFwB,OAG9BiB,EAASI,YAAoB3D,EAAQsB,IAHP,kBAIvBgB,GAJuB,0DAMvB,GANuB,yDAQ/B,CAAChB,EAASiC,EAAUnC,EAAYqB,EAAkBzC,MAM1C4D,EAAoB,WAAO,IAC9BtC,EAAiCrE,cAAjCqE,QACFuC,EAAepF,cACfqF,EAAkB9E,cAWxB,MAAO,CAAEyE,UATaC,sBAAW,sBAAC,4BAAAnC,EAAA,+EAEbJ,YAAQ0C,EAAcC,EAAiBxC,GAF1B,cAExBgB,EAFwB,yBAGvBA,GAHuB,0DAKvB,GALuB,yDAO/B,CAAChB,EAASuC,EAAcC,MAuBhBC,EAAgB,SAACC,EAAyBC,GAA4B,IACzE3C,EAAYrE,cAAZqE,QAYR,OAXkBoC,sBAAW,sBAAC,4BAAAnC,EAAA,+EAETyC,EAAcxC,QAC5BL,QAAQ8C,EAAgBvC,SAAOC,UAAUC,YACzCC,KAAK,CAAEC,KAAMR,IAJU,cAEpBgB,EAFoB,yBAKnBA,GALmB,0DAOnB,GAPmB,yDAS3B,CAAChB,EAAS2C,EAAgBD,M,qFC7EhBE,IAZM,SAACC,GACpB,IAAMC,EAAkBhI,cADM,EAEHa,cAAnBoH,EAFsB,EAEtBA,QAASC,EAFa,EAEbA,MACTC,EAA0BC,YAAeH,EAASC,GAAlDC,sBAER,OACE,cAAC,IAAD,yBAAQE,QAASF,GAA2BJ,GAA5C,aACGC,EAAgB,IAAK,sB,46gBCL5B,IAuBMM,EAAeC,IAAOC,IAAV,KACN,SAACT,GAAD,OAAWA,EAAMU,QAClB,SAACV,GAAD,OAAWA,EAAMU,QAGbC,EA5BuB,SAAC,GAAqB,IAGtDC,EAHqD,IAAlBF,YAAkB,MAAX,KAAW,EACjDG,EAAY3I,qBAAW4I,KAAvBD,QAGR,OAAQH,GACN,IAAK,KACHE,EAAIC,EAAQ,GACZ,MACF,IAAK,KACHD,EAAIC,EAAQ,GACZ,MACF,IAAK,KACL,QACED,EAAIC,EAAQ,GAGhB,OAAO,cAACN,EAAD,CAAcG,KAAME,K,wRClB7B,IAcMG,EAAqBP,IAAOC,IAAV,KAEF,SAACT,GAAD,OAAWA,EAAMgB,MAAMC,OAAOC,eAGvC,SAAClB,GAAD,OAAWA,EAAMgB,MAAMH,QAAQ,MAGtCM,EAAoBX,IAAOC,IAAV,KAKRW,EA3BgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1BC,EAAIC,IAAMC,SAASC,QAAQJ,GAAUjJ,OAC3C,OACE,cAAC2I,EAAD,UACGQ,IAAMC,SAAS9H,IAAI2H,GAAU,SAACK,EAAOC,GAAR,OAC5B,qCACE,cAACR,EAAD,UAAoBO,IACnBC,EAAIL,EAAI,GAAK,cAAC,EAAD,c,kpjBCZxB,mHAEA5E,IAAUhB,OAAO,CACfkG,eAAgB,IAChBC,eAAgB,KAGX,IAAMC,EAAiB,IAAIpF,IAAU,GAC/BqF,EAAkB,IAAIrF,IAAU,SAChCsF,EAAiB,G,shBCE9B,IAUMC,EAAqBzB,IAAOC,IAAV,KAEF,SAACT,GAAD,OAAWA,EAAMgB,MAAMC,OAAOiB,SACjC,SAAClC,GAAD,OAAWA,EAAMgB,MAAMmB,MAAMC,WAGjC,SAACpC,GAAD,OAAWA,EAAMgB,MAAMH,QAAQ,MAGxCwB,EAAc7B,IAAO0B,MAAV,KAIN,SAAClC,GAAD,OAAWA,EAAMgB,MAAMC,OAAOqB,WAS1BC,EAhCqB,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,eAAgBnE,EAAY,EAAZA,MAC1F,OACE,eAACyD,EAAD,aACKU,GAAkBA,EACrB,cAACN,EAAD,CAAaK,YAAaA,EAAalE,MAAOA,EAAOiE,SAAUA,MAC5DD,GAAgBA,O,ohBCdzB,IAaeI,EAbIpC,IAAOC,IAAV,K,oJCMhB,IAIMoC,EAAcrC,IAAOC,IAAV,KACN,gBAAGqC,EAAH,EAAGA,WAAH,SAAe9B,MAAkBC,OAAO6B,EAAa,eAAiB,cAIlEC,EATqB,SAAC,GAAD,IAAGtL,EAAH,EAAGA,KAAH,IAASqL,kBAAT,gBAClC,cAACD,EAAD,CAAaC,WAAYA,EAAzB,SAAsCrL,K,2CCe3BuL,EAAe,SAACnH,GAAgC,IAAxBoH,EAAuB,wDACpD7D,EAAWC,cADyC,EAEtCvG,cAAZqE,EAFkD,EAElDA,QACFD,EAAqB/B,cACrBmD,EAAmB9C,YAAYK,GAE/BqH,EAAc3D,sBAAW,uCAC7B,WAAOzB,GAAP,SAAAV,EAAA,yDACiB,IAAXvB,EADN,gCAEU+B,YAAMV,EAAoB,EAAGY,EAAQX,GAF/C,kCAGa8F,EAHb,iCAIU1E,YAAaD,EAAkBR,EAAQX,GAJjD,gDAMUkB,YAAUC,EAAkBR,EAAQX,GAN9C,QAQEiC,EAAS+D,YAAwBtH,EAAQsB,IACzCiC,EAASgE,YAAkBvH,EAAQsB,IATrC,4CAD6B,sDAY7B,CAACA,EAASiC,EAAU6D,EAAY/F,EAAoBoB,EAAkBzC,IAGxE,MAAO,CAAEwH,QAASH,IChBdI,EAAW,CAAC,GAELC,EAAiB,SAAC1H,GAC7B,IAAMuD,EAAWC,cACTlC,EAAYrE,cAAZqE,QACFD,EAAqB/B,cACrBmD,EAAmB9C,YAAYK,GAC/B2H,EAAaF,EAAS5L,SAASmE,GAqBrC,MAAO,CAAE4H,UAnBalE,sBAAW,uCAC/B,WAAOzB,GAAP,mBAAAV,EAAA,yDACiB,IAAXvB,EADN,gCAEyB4C,YAAQvB,EAAoB,EAAGY,EAAQX,GAFhE,OAEUuG,EAFV,OAGIC,QAAQC,KAAKF,GAHjB,2BAIaF,EAJb,kCAKyB3E,YAAoBP,EAAkBR,EAAQX,GALvE,QAKUuG,EALV,OAMIC,QAAQC,KAAKF,GANjB,yCAQyB/E,YAAYL,EAAkBR,EAAQX,GAR/D,QAQUuG,EARV,OASIC,QAAQC,KAAKF,GATjB,QAWEtE,EAAS+D,YAAwBtH,EAAQsB,IACzCiC,EAASgE,YAAkBvH,EAAQsB,IACnCiC,EAASyE,YAAwBhI,EAAQsB,IAb3C,4CAD+B,sDAgB/B,CAACA,EAASiC,EAAUoE,EAAYtG,EAAoBoB,EAAkBzC,MClB7DiI,G,MAAiB,SAACjI,GAAgC,IAAxBoH,EAAuB,wDACtD7D,EAAWC,cAD2C,EAExCvG,cAAZqE,EAFoD,EAEpDA,QACFmB,EAAmB9C,YAAYK,GAC/BqB,EAAqB/B,cAErB4I,EAAgBxE,sBAAW,sBAAC,sBAAAnC,EAAA,yDACjB,IAAXvB,EAD4B,gCAExBiD,YAAQ5B,EAAoB,EAAGC,GAFP,kCAGrB8F,EAHqB,iCAIxBjE,YAAgBV,EAAkBnB,GAJV,gDAMxB4B,YAAaT,EAAkBnB,GANP,QAQhCiC,EAASyE,YAAwBhI,EAAQsB,IACzCiC,EAASgE,YAAkBvH,EAAQsB,IATH,4CAU/B,CAACA,EAASiC,EAAU6D,EAAY/F,EAAoBoB,EAAkBzC,IAEzE,MAAO,CAAEmI,SAAUD,K,wGCrCrB,IAAME,EAAazD,YAAO0D,IAAP1D,CAAH,KACL,gBAAG2D,EAAH,EAAGA,WAAYC,EAAf,EAAeA,MAAOpD,EAAtB,EAAsBA,MAAtB,OAAmCmD,EAAanD,EAAMC,OAAOoD,aAAeD,KAGjFE,EAAkC,SAAC,GAA4D,IAA1D9F,EAAyD,EAAzDA,MAAO+F,EAAkD,EAAlDA,SAAUH,EAAwC,EAAxCA,MAAO5H,EAAiC,EAAjCA,SAAU2H,EAAuB,EAAvBA,WAAYK,EAAW,EAAXA,KACjFC,EAAgBzL,iBAAO,GAM7B,OAJAI,qBAAU,WACRqL,EAAcpL,QAAUmF,IACvB,CAACA,IAGF,eAACyF,EAAD,CAAYS,MAAI,EAACN,MAAOA,EAAOG,SAAUA,EAAUJ,WAAYA,EAA/D,UACE,cAAC,IAAD,CAASQ,MAAOF,EAAcpL,QAASuL,IAAKpG,EAAOhC,SAAUA,EAAUqI,SAAU,EAAGC,UAAU,MAC7FtG,GAASgG,GAAQ,+BAAOA,QAK/BF,EAAQS,aAAe,CACrBR,SAAU,OACVJ,YAAY,EACZC,MAAO,OACP5H,SAAU,GAGG8H,Q,onBC7Bf,IAiCMU,GAAmBxE,IAAOC,IAAV,MAEhBF,GAAeC,IAAOC,IAAV,MACP,SAACT,GAAD,OAAWA,EAAMgB,MAAMH,QAAQ,MAGpCoE,GAA8BzE,IAAOC,IAAV,MAK3ByE,GAAgB1E,IAAOC,IAAV,MAER,SAACT,GAAD,OAAWA,EAAMgB,MAAMC,OAAOqB,WAQnC6C,GAAoB3E,IAAO4E,KAAV,KACZ,SAACpF,GAAD,OAAWA,EAAMgB,MAAMC,OAAOqB,WAI1B+C,GA3D+B,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,IAAKC,EAA6D,EAA7DA,OAAQ9C,EAAqD,EAArDA,SAAU+C,EAA2C,EAA3CA,YAAahH,EAA8B,EAA9BA,MAA8B,IAAvBiH,oBAAuB,MAAR,EAAQ,EAC3GxF,EAAkBhI,cACxB,OACE,eAAC+M,GAAD,WACE,eAACE,GAAD,WACGI,EAAII,iBADP,IAC0BH,EAD1B,IACmCtF,EAAgB,IAAK,gBAExD,cAACsC,EAAA,EAAD,CACEC,aACE,eAACyC,GAAD,WACE,cAACE,GAAD,UAAoBI,IACpB,cAAChF,GAAD,IACA,8BACE,cAAC,IAAD,CAAQG,KAAK,KAAKJ,QAASkF,EAA3B,SACGvF,EAAgB,IAAK,cAK9BwC,SAAUA,EACVC,YAAY,IACZlE,MAAOA,IAERiH,EAAe,EACd,eAACP,GAAD,WACGjF,EAAgB,MAAO,eAD1B,KAC4C,IAAIvD,IAAU8B,GAAS,GAAGR,MAAMyH,EAAe,KAAOxH,WAAY,IAC3GsH,KAED,SCsBKI,GAjDmC,SAAC,GAAmD,IAAjDL,EAAgD,EAAhDA,IAAKM,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,UAAgC,IAArBC,iBAAqB,MAAT,GAAS,IAC7E7M,mBAAS,IADoE,mBAC5F8M,EAD4F,KACvFC,EADuF,OAEjE/M,oBAAS,GAFwD,mBAE5FgN,EAF4F,KAEjFC,EAFiF,KAG7FjG,EAAkBhI,cAClBkO,EAAcC,mBAAQ,WAC1B,OAAOtJ,YAAsBwI,KAC5B,CAACA,IAEEe,EAAe9G,uBACnB,SAAC+G,GACCN,EAAOM,EAAEC,cAAc/H,SAEzB,CAACwH,IAGGQ,EAAkBjH,uBAAY,WAClCyG,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOS,MAAK,UAAKxG,EAAgB,IAAK,WAA1B,YAAwC6F,EAAxC,WAA4DD,UAAWA,EAAnF,UACE,cAAC,GAAD,CACErH,MAAOuH,EACPP,YAAagB,EACb/D,SAAU4D,EACVf,IAAKa,EACLZ,OAAQO,IAEV,eAAC1E,EAAA,EAAD,WACE,cAAC,IAAD,CAAQsF,WAAS,EAACC,QAAQ,YAAYrG,QAASuF,EAA/C,SACG5F,EAAgB,IAAK,YAExB,cAAC,IAAD,CACEyG,WAAS,EACTE,SAAUX,EACV3F,QAAO,sBAAE,sBAAAlD,EAAA,6DACP8I,GAAa,GADN,SAEDN,EAAUG,GAFT,OAGPG,GAAa,GACbL,IAJO,2CAHX,SAUGI,EAAYhG,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oBCM5E4G,GAhDqC,SAAC,GAAmD,IAAjDjB,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAWP,EAA0B,EAA1BA,IAA0B,IAArBQ,iBAAqB,MAAT,GAAS,IAC/E7M,mBAAS,IADsE,mBAC9F8M,EAD8F,KACzFC,EADyF,OAEnE/M,oBAAS,GAF0D,mBAE9FgN,EAF8F,KAEnFC,EAFmF,KAG/FjG,EAAkBhI,cAClBkO,EAAcC,mBAAQ,WAC1B,OAAOtJ,YAAsBwI,KAC5B,CAACA,IAEEe,EAAe9G,uBACnB,SAAC+G,GACCN,EAAOM,EAAEC,cAAc/H,SAEzB,CAACwH,IAGGQ,EAAkBjH,uBAAY,WAClCyG,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOS,MAAK,mBAAcX,GAAaD,UAAWA,EAAlD,UACE,cAAC,GAAD,CACEL,YAAagB,EACb/D,SAAU4D,EACV7H,MAAOuH,EACPT,IAAKa,EACLZ,OAAQO,IAEV,eAAC1E,EAAA,EAAD,WACE,cAAC,IAAD,CAAQuF,QAAQ,YAAYrG,QAASuF,EAArC,SACG5F,EAAgB,IAAK,YAExB,cAAC,IAAD,CACE2G,SAAUX,EACV3F,QAAO,sBAAE,sBAAAlD,EAAA,6DACP8I,GAAa,GADN,SAEDN,EAAUG,GAFT,OAGPG,GAAa,GACbL,IAJO,2CAFX,SASGI,EAAYhG,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oB,uKCxC3F,IAqCe6G,GArCoC,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,SAAUnB,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,UAAgC,IAArBC,iBAAqB,MAAT,GAAS,IACvE7M,oBAAS,GAD8D,mBAClGgN,EADkG,KACvFC,EADuF,KAEnGjG,EAAkBhI,cAClBkO,EAAcC,mBAAQ,WAC1B,OAAOtJ,YAAsBiK,KAC5B,CAACA,IAEJ,OACE,eAAC,IAAD,CACEN,MAAK,UAAKxG,EAAgB,IAAK,YAA1B,YAAyCA,EAAgB,IAAD,UAAS6F,EAAT,aAC7DD,UAAWA,EAFb,UAIE,cAACmB,GAAD,UACE,cAAC,EAAD,CAASxI,MAAOyI,OAAOd,OAEzB,eAAC/E,EAAA,EAAD,WACE,cAAC,IAAD,CAAQsF,WAAS,EAACC,QAAQ,YAAYrG,QAASuF,EAA/C,SACG5F,EAAgB,IAAK,YAExB,cAAC,IAAD,CACExE,GAAG,gBACHiL,WAAS,EACTE,SAAUX,EACV3F,QAAO,sBAAE,sBAAAlD,EAAA,6DACP8I,GAAa,GADN,SAEDN,EAAUO,GAFT,OAGPD,GAAa,GACbL,IAJO,2CAJX,SAWGI,EAAYhG,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oBASrF+G,GAAaxG,IAAOC,IAAV,M,8KCjDhB,IAQeyG,GARG1G,IAAOC,IAAV,MACJ,gBAAGqC,EAAH,EAAGA,WAAH,SAAe9B,MAAkBC,OAAO6B,EAAa,eAAiB,W,wTCLjF,IAceqE,GAdF3G,IAAOC,IAAV,MACM,SAACT,GAAD,OAAWA,EAAMgB,MAAMoG,KAAKC,cAIjC,gBAAGvE,EAAH,EAAGA,WAAH,SAAe9B,MAAkBC,OAAO6B,EAAa,eAAiB,gBACjE,qBAAGwE,SAEX,oEACA,iF,mRCHR,IAAMC,GAAQ/G,IAAOC,IAAV,MAOL+G,GAAahH,IAAOpD,EAAV,MA2BDqK,GAtBwB,SAAC,GAA4B,IAAD,IAAzBC,WACxC,YADiE,SAG7D,gCACE,cAACH,GAAD,8BACA,cAACC,GAAD,CACEG,KAAK,6FACLC,OAAO,SAFT,sCAWJ,8BACE,cAAC,GAAD,CAAW9E,YAAU,EAArB,yB,igCCrBN,I,GAiEM+E,GAAerH,IAAOsH,OAAV,MAEF,SAAC9H,GAAD,OAAaA,EAAM4G,SAAP,OAAkB5G,EAAMgB,MAAMoG,KAAKC,cAGpD,SAACrH,GAAD,OAAaA,EAAM4G,SAAP,uBAGR,SAAC5G,GAAD,OAAWA,EAAMuE,YAEpB,SAACvE,GAAD,OAAWA,EAAMU,QAGX,SAACV,GAAD,OAAWA,EAAM+H,WAChB,SAAC/H,GAAD,OAAWA,EAAM+H,WAChB,SAAC/H,GAAD,OAAaA,EAAM4G,SAAuB,YAAZoB,KAE5B,SAAChI,GAAD,OAAaA,EAAM4G,SAAP,oBAO5BqB,GAAazH,YAAO0H,KAAP1H,CAAH,MAOF,SAACR,GAAD,OAAYA,EAAMgB,MAAMH,QAAQ,MAC/B,SAACb,GAAD,OAAWA,EAAMgB,MAAMH,QAAQ,MAIxCsH,GAAqB3H,IAAOpD,EAAV,MAOV,SAAC4C,GAAD,OAAYA,EAAMgB,MAAMH,QAAQ,MAC/B,SAACb,GAAD,OAAWA,EAAMgB,MAAMH,QAAQ,MAI/BuH,GAjHuB,SAAC,GAA2D,IAK5FC,EACAC,EACA/D,EAPmClD,EAAwD,EAAxDA,SAAUuF,EAA8C,EAA9CA,SAAUe,EAAoC,EAApCA,KAAMrH,EAA8B,EAA9BA,QAASI,EAAqB,EAArBA,KAAMjJ,EAAe,EAAfA,KAAM8Q,EAAS,EAATA,GAAS,EACnErQ,qBAAW4I,KAA/BG,EADuF,EACvFA,OAAQJ,EAD+E,EAC/EA,QACV2H,EAAcvH,EAAOoG,WAM3B,OAAQ3G,GACN,IAAK,KACH4H,EAAgBzH,EAAQ,GACxBwH,EAAa,GACb9D,EAAW,GACX,MACF,IAAK,KACH+D,EAAgBzH,EAAQ,GACxBwH,EAAa,GACb9D,EAAW,GACX,MACF,IAAK,KACL,QACE+D,EAAgBzH,EAAQ,GACxBwH,EAAa,GACb9D,EAAW,GAGf,IAAMkE,EAAcrC,mBAAQ,WAC1B,OAAImC,EACK,cAACN,GAAD,CAAYM,GAAIA,EAAhB,SAAqB9Q,IAE1BkQ,EAEA,cAACQ,GAAD,CAAoBR,KAAMA,EAAMC,OAAO,UAAvC,SACGnQ,IAIAA,IACN,CAACkQ,EAAMlQ,EAAM8Q,IAEhB,OACE,eAACV,GAAD,CACEa,UAtCAA,UAuCAtE,MAAOoE,EACP5B,SAAUA,EACVrC,SAAUA,EACVjE,QAASA,EACTyH,QAASO,EACT5H,KAAM2H,EAPR,UASGhH,EACAoH,M,mkCCzDP,IAAME,IAAI,sBACP3M,IAAaC,SCgBG,kBACjB,cAAC,IAAD,CAAK0K,QAAQ,UAAUiC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA1C,wBDlBQ,gBAEP7M,IAAa8M,MCGA,kBACd,cAAC,IAAD,CAAKnC,QAAQ,YAAYiC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA5C,qBDNQ,gBAGP7M,IAAa+M,WCQK,kBACnB,cAAC,IAAD,CAAKpC,QAAQ,aAAaiC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA7C,0BDZQ,IAgBJG,GAAexI,IAAOC,IAAV,MACQ,qBAAGO,MAAmBiI,OAAS,UAAY,aAC1D,gBAAGnG,EAAH,EAAGA,WAAH,SAAe9B,MAAkBC,OAAO6B,EAAa,gBAAkB,eAI5EoG,GAAsB1I,IAAOsH,OAAV,MAId,SAAC9H,GAAD,OAAWA,EAAMgB,MAAMC,OAAOqB,WAkBnC6G,GAAU3I,IAAOC,IAAV,MAIP2I,GAAM5I,IAAOC,IAAV,MAKH4I,GAAW7I,IAAOC,IAAV,MAGRsC,GAAQvC,IAAOC,IAAV,MAGL6I,GAAY9I,IAAOpD,EAAV,MAMTmM,GAA8B,SAAC,GAQ9B,IAPLC,EAOI,EAPJA,YACAC,EAMI,EANJA,YACAC,EAKI,EALJA,gBACA5G,EAII,EAJJA,WAEA/G,GAEI,EAHJ4N,iBAGI,EAFJ5N,cACA6N,EACI,EADJA,iBACI,EACwB3Q,oBAAS,GADjC,mBACG4Q,EADH,KACWC,EADX,KAEE7J,EAAkBhI,cAClB8R,EAAOF,EAASG,KAAYC,KAG5BC,EAAMvB,GAAK5M,GAEjB,OACE,eAACiN,GAAD,CAAclG,WAAYA,EAA1B,UACE,eAACsG,GAAD,WACE,cAACC,GAAD,UACE,cAACa,EAAD,MAEF,eAAChB,GAAD,CAAqB5I,QATP,kBAAMwJ,GAAWD,IAS/B,UACGA,EAAS,OAAS,UADrB,IACgC,cAACE,EAAD,UAGjCF,GACC,eAACV,GAAD,WACE,eAACC,GAAD,CAAKe,MAAO,CAAEC,aAAc,OAA5B,UACE,cAACf,GAAD,UACE,eAAC,GAAD,WACE,uBAAMgB,KAAK,MAAMC,aAAW,QAA5B,yBACK,OAFP,SAISV,EAJT,eAOF,cAAC,EAAD,CAASrF,SAAS,OAAOJ,WAAYrB,EAAYtE,MAAOlC,YAAiBmN,QAU1EC,EAAkB,GACjB,eAACN,GAAD,WACE,cAACC,GAAD,UACE,eAAC,GAAD,WAAQpJ,EAAgB,IAAK,oBAA7B,SAEF,cAAC,EAAD,CAASsE,SAAS,OAAOJ,WAAYrB,EAAYtE,MAAOkL,EAAiBlN,SAAU,OAGvF,cAAC8M,GAAD,CAAW3B,KAAM6B,EAAa5B,OAAO,SAArC,SACG3H,EAAgB,IAAK,8BAQnBsB,OAAMgJ,KAAKhB,I,k2BExG1B,IAsLMiB,GAAmBhK,IAAOC,IAAV,MAWhBgK,GAAoBjK,IAAOC,IAAV,MAQjBiK,GAAqBlK,IAAOC,IAAV,MAOlBkK,GAAqBnK,IAAOC,IAAV,MACZ,SAACT,GAAD,OAAWA,EAAMgB,MAAMH,QAAQ,MAChC,SAACb,GAAD,OAAWA,EAAMgB,MAAMH,QAAQ,MAGpC+J,GAAgBpK,IAAOC,IAAV,MAKJoK,GA1N0B,SAAC,GAAc,IAAZjP,EAAW,EAAXA,KAExCC,EAgBED,EAhBFC,OACAiP,EAeElP,EAfFkP,MACAhF,EAcElK,EAdFkK,UACA8D,EAaEhO,EAbFgO,iBACAmB,EAYEnP,EAZFmP,oBACAvB,EAWE5N,EAXF4N,YACA1K,EAUElD,EAVFkD,QACAkM,EASEpP,EATFoP,IACAC,EAQErP,EARFqP,cACAlP,EAOEH,EAPFG,aACA0N,EAME7N,EANF6N,YACAyB,EAKEtP,EALFsP,WACAC,EAIEvP,EAJFuP,SACArI,EAGElH,EAHFkH,WACAsI,EAEExP,EAFFwP,SACAC,EACEzP,EADFyP,aAGIC,EAAYvP,IAAiBC,IAAaC,QAC1CgE,EAAkBhI,cAClBsT,EAAuBnR,YAAS2Q,GAC9B5N,EAAYrE,cAAZqE,QACFqO,EAAQvM,cACNK,EAAcH,YAAeoM,EAAsB1P,GAAnDyD,UACA+D,EAAYL,EAAanH,EAAQyP,GAAjCjI,QACAI,EAAcF,EAAe1H,GAA7B4H,UACAO,EAAaF,EAAejI,EAAQyP,GAApCtH,SA5B6C,EA8BH/K,oBAAS,GA9BN,mBA8B9CwS,EA9B8C,KA8B3BC,EA9B2B,OA+BnBzS,oBAAS,GA/BU,mBA+B9CgN,EA/B8C,KA+BnCC,GA/BmC,KAiC/CyF,GAAY,IAAIjP,KAAkB,OAAR0O,QAAQ,IAARA,OAAA,EAAAA,EAAUO,YAAa,GACjDC,GAAsB,IAAIlP,KAAkB,OAAR0O,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,sBAAuB,GACrEC,GAAgB,IAAInP,KAAkB,OAAR0O,QAAQ,IAARA,OAAA,EAAAA,EAAUS,gBAAiB,GACzD9E,GAAW,IAAIrK,KAAkB,OAAR0O,QAAQ,IAARA,OAAA,EAAAA,EAAUU,gBAAiB,GAEpDnC,GAAmBoC,KAAKzG,IAAI4F,EAAaM,EAAO,GAChD9B,GAAkBqC,KAAKzG,IAAI6F,EAAWK,EAAO,GAC7ChI,GAAaoG,IAAqBoC,IAAWC,MAC7CC,IAAuC,OAAbL,SAAa,IAAbA,QAAA,EAAAA,GAAehP,YAAa,EACtDsP,IAAiBD,KAA4BP,GAAU9O,aAAeyO,EACtEc,GAAetJ,GAAcoJ,GAE7BG,GAAiB,IAAI3P,IAAU2O,GAAciB,aAAa,IAAI5P,IAAU,IAAIE,IAAIqO,IA7CjC,GA8C1BsB,YACzB,cAAC,GAAD,CACEjH,IAAK+F,GAAgBO,GAAoBY,cAAcH,IAAkBA,GAAiBT,GAC1FhG,UAAWvC,EACXyC,UAAWuF,EAAY,UAAMzB,EAAN,aAA2ByB,EAA3B,SAAiDzB,KAJrE6C,GA9C8C,wBAsDzBF,YAC1B,cAAC,GAAD,CAAexF,SAAUA,GAAUnB,UAAWvC,EAASyC,UAAW8D,KAD7D8C,GAtD8C,wBA0DzBH,YAC1B,cAAC,GAAD,CAAejH,IAAKuG,GAAejG,UAAWnC,EAAWqC,UAAW8D,KAD/D+C,GA1D8C,qBA8D/CC,GAAgBrN,sBAAW,sBAAC,sBAAAnC,EAAA,sEAE9BsO,GAAqB,GAFS,SAGTpM,IAHS,eAM5BoM,GAAqB,GANO,gDAS9B/H,QAAQkJ,MAAR,MAT8B,yDAW/B,CAACvN,EAAWoM,IAEf,OACE,eAAC,GAAD,CACEpE,SAAU8E,GACVtJ,WAAYA,GAAyB,IAAXjH,EAC1BsO,MAAO,CAAE2C,eAAgB,YAAazF,WAAY,yBAHpD,UAKGvE,GAAyB,IAAXjH,GAAgB,cAAC2O,GAAD,IAC/B,sBAAKL,MAAO,CAAEpC,QAAS,QAAvB,UACE,eAAC,GAAD,CAAWjF,WAAYA,GAAyB,IAAXjH,EAArC,UACG2H,IAAc,QADjB,IAC2BsC,EAD3B,IACuC7F,EAAgB,IAAK,WAE5D,sBAAKkK,MAAO,CAAEC,aAAc,MAAO2C,QAAS,OAAQC,WAAY,UAAhE,UACE,qBAAK7C,MAAO,CAAE8C,KAAM,GAApB,SACE,cAAC,IAAD,CAAOC,IAAG,yBAAoBpC,GAAShF,EAA7B,QAA8CqH,MAAO,GAAIC,OAAQ,GAAIC,IAAKvH,MAErF3I,GAAW2B,IAAY0E,IACtB,cAAC8J,GAAD,CACE1G,UAAWG,GAASlK,YAAcoJ,EAClCxO,KAAMwO,EAAY,aAAe,UACjC3F,QAAO,sBAAE,sBAAAlD,EAAA,6DACP8I,IAAa,GADN,SAEDlC,IAFC,OAGPkC,IAAa,GAHN,gDAQb1C,GAYA,cAAC,GAAD,CAAekE,WAAYwE,KAX3B,eAACxB,GAAD,WACE,cAAC,EAAD,CAASlM,MAAOlC,YAAiByK,GAAUkE,GAAgB9G,WAAYrB,IAC3D,IAAXjH,GAAgBsB,GAAW2B,GAC1B,cAACwO,GAAD,CACE1G,UAAWG,GAASlK,YAAcoJ,EAClCxO,KAAkBwI,EAAgB,IAA5BgG,EAAiC,cAAsC,YAC7E3F,QAASoM,QAOjB,cAAC,EAAD,CAAO5J,WAAYA,GAAyB,IAAXjH,EAAcpE,KAAMwI,EAAgB,IAAD,UAAS6F,EAAT,cACpE,eAAC2E,GAAD,YACItN,GAAW,cAAC4C,EAAA,EAAD,IACZ5C,IACEgP,KAAkB3I,GACjB,qBAAK2G,MAAO,CAAE8C,KAAM,GAApB,SACE,cAAC,IAAD,CAAQrG,SAAU9D,GAAc2I,EAAmBnL,QAASsM,GAAelG,WAAS,EAApF,2BACckD,OAIhB,qCACE,cAAC,IAAD,CACEhD,SAAUiF,GAAc0B,GAAG,IAAI7Q,IAAU,KAAOuJ,EAChD3F,QACEkD,GAAU,sBACN,sBAAApG,EAAA,6DACE8I,IAAa,GADf,SAEQzC,EAAU,KAFlB,OAGEyC,IAAa,GAHf,2CAKAyG,GATR,2BAYc/C,KAEd,cAACe,GAAD,KACEnH,IACA,cAAC,IAAD,CAAYoD,SAAU9D,GAAyB,IAAXjH,EAAcyE,QAASmM,GAA3D,SACE,cAAC,IAAD,CAASrI,MAAM,wBAM3B,eAACwG,GAAD,WACE,sBAAKT,MAAO,CAAE8C,KAAM,GAApB,UAA0BhN,EAAgB,IAAK,OAA/C,OACC6C,GAAcU,KAAewH,IAA7B,OAAoCA,QAApC,IAAoCA,OAApC,EAAoCA,EAAKwC,YAAW,OAACxC,QAAD,IAACA,OAAD,EAACA,EAAKyC,YACzD,IAEA,cAAC,EAAD,CAASlJ,SAAS,OAAOJ,WAAYrB,EAAYtE,MAAK,OAAEwM,QAAF,IAAEA,OAAF,EAAEA,EAAKnO,WAAYL,SAAU,EAAGgI,KAAK,SAG/F,eAACoG,GAAD,WACE,sBAAKT,MAAO,CAAE8C,KAAM,GAApB,UACE,uBAAM5C,KAAK,MAAMC,aAAYV,EAA7B,yBACK,OAEJ3J,EAAgB,IAAK,cAJxB,OAMA,cAAC,EAAD,CAASsE,SAAS,OAAOJ,WAAYrB,EAAYtE,MAAOlC,YAAiBuP,YAG7E,cAAC,GAAD,CACErC,YAAaA,EACbC,YAAaA,EACbC,gBAAiBA,GACjB5G,WAAYA,EACZ6G,iBAAkBA,GAClB5N,aAAcA,EACd6N,iBAAkBA,QCpLb8D,GAAU,uCAAG,8BAAAtQ,EAAA,sEACDuQ,MAAM,6CADL,cAClBC,EADkB,gBAELA,EAASC,OAFJ,cAElBvW,EAFkB,yBAIjBA,EAAKA,MAJY,2CAAH,qD,k2BCEvB,IAkRMkT,GAAmBhK,IAAOC,IAAV,MAWhBgK,GAAoBjK,IAAOC,IAAV,MAQjBiK,GAAqBlK,IAAOC,IAAV,MAOlBkK,GAAqBnK,IAAOC,IAAV,MACZ,SAACT,GAAD,OAAWA,EAAMgB,MAAMH,QAAQ,MAChC,SAACb,GAAD,OAAWA,EAAMgB,MAAMH,QAAQ,MAGpC+J,GAAgBpK,IAAOC,IAAV,MAKJoK,GAtT0B,SAAC,GAAc,IAAZjP,EAAW,EAAXA,KAExCC,EAgBED,EAhBFC,OACAiP,EAeElP,EAfFkP,MACAhF,EAcElK,EAdFkK,UACA8D,EAaEhO,EAbFgO,iBACAmB,EAYEnP,EAZFmP,oBACAvB,EAWE5N,EAXF4N,YACA1K,EAUElD,EAVFkD,QACAmM,EASErP,EATFqP,cACAlP,EAQEH,EARFG,aACA0N,EAOE7N,EAPF6N,YACAyB,EAMEtP,EANFsP,WACAC,EAKEvP,EALFuP,SACArI,EAIElH,EAJFkH,WACAsI,EAGExP,EAHFwP,SACAC,EAEEzP,EAFFyP,aAIIC,GAFF1P,EADFkS,cAGgB/R,IAAiBC,IAAaC,SAC1CgE,EAAkBhI,cAClBsT,EAAuBnR,YAAS2Q,GAChCgD,EAAkBzS,YAAMyP,GAvBuB,EAyB/B9R,mBAAS,IAAIyD,IAAU,IAzBQ,mBAyB9CsO,EAzB8C,KAyBzCgD,EAzByC,OA2BnB/U,mBAAS,IAAIyD,IAAU,IA3BJ,gCA4BfzD,mBAAS,IAAIyD,IAAU,KA5BR,mBA4B9CuR,EA5B8C,KA4BjCC,EA5BiC,QA8BrBjV,mBAAS,IAAIyD,IAAU,IA9BF,qBA8B9CyR,GA9B8C,MA8BpCC,GA9BoC,SA+BrBnV,mBAAS,IAAIyD,IAAU,IA/BF,qBA+B9C2R,GA/B8C,MA+BpCC,GA/BoC,SAiCzBrV,qBAjCyB,qBAiC9CsV,GAjC8C,MAiCtCC,GAjCsC,SAkCzBvV,qBAlCyB,qBAkC9CwV,GAlC8C,MAkCtCC,GAlCsC,MAoC7CvR,GAAYrE,cAAZqE,QACFqO,GAAQvM,cACNK,GAAcH,YAAeoM,EAAsB1P,GAAnDyD,UACA+D,GAAYL,EAAanH,EAAQyP,GAAjCjI,QACAI,GAAcF,EAAe1H,GAA7B4H,UACAO,GAAaF,EAAejI,EAAQyP,GAApCtH,SASF2K,IARQC,cAQMC,eACdC,GAAcC,cACdC,GAAmBH,cApD4B,GAsDH5V,oBAAS,GAtDN,qBAsD9CwS,GAtD8C,MAsD3BC,GAtD2B,SAuDnBzS,oBAAS,GAvDU,qBAuD9CgN,GAvD8C,MAuDnCC,GAvDmC,MAyD/CyF,GAAY,IAAIjP,KAAkB,OAAR0O,QAAQ,IAARA,OAAA,EAAAA,EAAUO,YAAa,GACjDC,GAAsB,IAAIlP,KAAkB,OAAR0O,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,sBAAuB,GACrEC,GAAgB,IAAInP,KAAkB,OAAR0O,QAAQ,IAARA,OAAA,EAAAA,EAAUS,gBAAiB,GACzD9E,GAAW,IAAIrK,KAAkB,OAAR0O,QAAQ,IAARA,OAAA,EAAAA,EAAUU,gBAAiB,GAEpDnC,GAAmBoC,KAAKzG,IAAI4F,EAAaM,GAAO,GAChD9B,GAAkBqC,KAAKzG,IAAI6F,EAAWK,GAAO,GAC7ChI,GAAaoG,IAAqBoC,IAAWC,MAC7CC,IAAuC,OAAbL,SAAa,IAAbA,QAAA,EAAAA,GAAehP,YAAa,EACtDsP,IAAiBD,KAA4BP,GAAU9O,aAAeyO,EACtEc,GAAetJ,GAAcoJ,GAE7BG,GAAiB,IAAI3P,IAAU2O,GAAciB,aAAa,IAAI5P,IAAU,IAAIE,IAAIqO,IArEjC,GAsE1BsB,YACzB,cAAC,GAAD,CACEjH,IAAK+F,GAAgBO,GAAoBY,cAAcH,IAAkBA,GAAiBT,GAC1FhG,UAAWvC,GACXyC,UAAWuF,EAAY,UAAMzB,EAAN,aAA2ByB,EAA3B,SAAiDzB,KAJrE6C,GAtE8C,wBA8EzBF,YAC1B,cAAC,GAAD,CAAexF,SAAUA,GAAUnB,UAAWvC,GAASyC,UAAW8D,KAD7D8C,GA9E8C,wBAkFzBH,YAC1B,cAAC,GAAD,CAAejH,IAAKuG,GAAejG,UAAWnC,GAAWqC,UAAW8D,KAD/D+C,GAlF8C,qBAsF/CC,GAAgBrN,sBAAW,sBAAC,sBAAAnC,EAAA,sEAE9BsO,IAAqB,GAFS,SAGTpM,KAHS,eAM5BoM,IAAqB,GANO,gDAS9B/H,QAAQkJ,MAAR,MAT8B,yDAW/B,CAACvN,GAAWoM,KAsEf,OApEAnK,IAAMnI,WAAU,gBACc4O,IAAxB+C,GACFgD,EAAgB1Q,QACbkR,SACAU,OACAC,MAAK,SAACC,GACLX,GAAUW,GACVpB,EAAgB1Q,QACboR,SACAQ,OACAC,MAAK,SAACE,GACLV,GAAUU,GACVrB,EAAgB1Q,QACb4Q,cACAgB,OACAC,MAAK,SAACG,GACLnB,EAAe,IAAIxR,IAAU2S,IAC7BtB,EAAgB1Q,QACbiS,cACAL,OACAC,MAAK,SAACK,GACLnB,GAAY,IAAI1R,IAAUJ,YAAiBiT,EAASC,aACpDlB,GAAY,IAAI5R,IAAUJ,YAAiBiT,EAASE,2BAMrE,CAAC1B,EAAiBhD,IAErBxJ,IAAMnI,WAAU,WACd,QAAe4O,IAAXuG,SAAmCvG,IAAXyG,SAAqCzG,IAAbmG,SAAuCnG,IAAbqG,GAAwB,OAC3ErG,IAAXuG,GAAuBA,GAAS,IAAImB,OAAO,KAAKA,OAAOjB,IACrEf,KAAawB,MAAK,SAAC5X,GAQjB,IAAMqY,EAAY,IAAIjT,IAAUiS,IAAa3Q,MAAMmQ,IAC7CyB,EAAa,IAAIlT,IAAUoS,IAAa9Q,MAAMqQ,IAc9CwB,EDjLY,SAACC,EAAmBd,EAAkBvF,EAAaqE,GAC3E,IAAMiC,EAA0B,IAAIrT,IAAUsS,GAAkBhR,MAAM8P,GAAe9P,MAAM+D,KACrFiO,EAA0B,IAAItT,IAAUoT,GAAmB9R,MAAMyL,GACjEoG,EAAME,EAAwBtP,IAAIuP,GAAyBhS,MAAM,KACvE,OAAO6R,EAAIrC,UAAYqC,EAAIpC,WAAa,KAAOoC,EAAIhT,WC6KjCoT,CAZON,EAAUO,KAAKN,GACFnP,IAAInE,YAAiB2R,IAAcjQ,MAAM2Q,IAavEK,GACA1S,YAAiBV,EAAK6N,YAAa7N,EAAKqP,eACxCkF,WAAWvU,EAAKkS,gBAElBE,EAAO,IAAItR,IAAUmT,UAIxB,CAACtB,GAAQE,GAAQE,GAAaG,GAAab,EAAarS,EAAMoT,GAAkBb,GAAUE,KAG3F,eAAC,GAAD,CACE/G,SAAU8E,GACVtJ,WAAYA,GAAyB,IAAXjH,EAC1BsO,MAAO,CAAE2C,eAAgB,YAAazF,WAAY,yBAHpD,UAKGvE,GAAyB,IAAXjH,GAAgB,cAAC,GAAD,IAC/B,sBAAKsO,MAAO,CAAEpC,QAAS,QAAvB,UACE,eAAC,GAAD,CAAWjF,WAAYA,GAAyB,IAAXjH,EAArC,UACG2H,IAAc,QADjB,IAC2BsC,EAD3B,IACuC7F,EAAgB,IAAK,WAE5D,sBAAKkK,MAAO,CAAEC,aAAc,MAAO2C,QAAS,OAAQC,WAAY,UAAhE,UACE,qBAAK7C,MAAO,CAAE8C,KAAM,GAApB,SACE,cAAC,IAAD,CAAOC,IAAG,yBAAoBpC,GAAShF,EAA7B,QAA8CqH,MAAO,GAAIC,OAAQ,GAAIC,IAAKvH,MAErF3I,IAAW2B,IAAY0E,IACtB,cAAC8J,GAAD,CACE1G,UAAWG,GAASlK,YAAcoJ,GAClCxO,KAAMwO,GAAY,aAAe,UACjC3F,QAAO,sBAAE,sBAAAlD,EAAA,6DACP8I,IAAa,GADN,SAEDlC,KAFC,OAGPkC,IAAa,GAHN,gDAQb1C,GAYA,cAAC,GAAD,CAAekE,WAAYwE,KAX3B,eAAC,GAAD,WACE,cAAC,EAAD,CAAS1N,MAAOlC,YAAiByK,GAAUkE,GAAgB9G,WAAYrB,IAC3D,IAAXjH,GAAgBsB,IAAW2B,GAC1B,cAACwO,GAAD,CACE1G,UAAWG,GAASlK,YAAcoJ,GAClCxO,KAAkBwI,EAAgB,IAA5BgG,GAAiC,cAAsC,YAC7E3F,QAASoM,QAOjB,cAAC,EAAD,CAAO5J,WAAYA,GAAyB,IAAXjH,EAAcpE,KAAMwI,EAAgB,IAAD,UAAS6F,EAAT,cACpE,eAAC,GAAD,YACI3I,IAAW,cAAC4C,EAAA,EAAD,IACZ5C,KACEgP,KAAkB3I,GACjB,qBAAK2G,MAAO,CAAE8C,KAAM,GAApB,SACE,cAAC,IAAD,CAAQrG,SAAU9D,GAAc2I,GAAmBnL,QAASsM,GAAelG,WAAS,EAApF,2BACckD,OAIhB,qCACE,cAAC,IAAD,CACEhD,SAAUiF,GAAc0B,GAAG,IAAI7Q,IAAU,KAAOuJ,GAChD3F,QACEkD,GAAU,sBACN,sBAAApG,EAAA,6DACE8I,IAAa,GADf,SAEQzC,GAAU,KAFlB,OAGEyC,IAAa,GAHf,2CAKAyG,GATR,2BAYc/C,KAEd,cAAC,GAAD,KACEpG,IACA,cAAC,IAAD,CAAYoD,SAAU9D,GAAyB,IAAXjH,EAAcyE,QAASmM,GAA3D,SACE,cAAC,IAAD,CAASrI,MAAM,wBAM3B,eAAC,GAAD,WACE,sBAAK+F,MAAO,CAAE8C,KAAM,GAApB,UAA0BhN,EAAgB,IAAK,OAA/C,OACC6C,GAAcU,KAAewH,IAA7B,OAAoCA,QAApC,IAAoCA,OAApC,EAAoCA,EAAKwC,YAAW,OAACxC,QAAD,IAACA,OAAD,EAACA,EAAKyC,YACzD,IAEA,cAAC,EAAD,CAASlJ,SAAS,OAAOJ,WAAYrB,EAAYtE,MAAK,OAAEwM,QAAF,IAAEA,OAAF,EAAEA,EAAKnO,WAAYL,SAAU,EAAGgI,KAAK,SAG/F,eAAC,GAAD,WACE,sBAAK2F,MAAO,CAAE8C,KAAM,GAApB,UACE,uBAAM5C,KAAK,MAAMC,aAAYV,EAA7B,yBACK,OAEJ3J,EAAgB,IAAK,cAJxB,OAMA,cAAC,EAAD,CAASsE,SAAS,OAAOJ,WAAYrB,EAAYtE,MAAOlC,YAAiBuP,YAG7E,cAAC,GAAD,CACErC,YAAaA,EACbC,YAAaA,EACbC,gBAAiBA,GACjB5G,WAAYA,EACZ6G,iBAAkBA,GAClB5N,aAAcA,EACd6N,iBAAkBA,Q,uKCvS1B,IAkBewG,GAlBQ,WAAO,IAAD,EACFC,cAAjBC,EADmB,EACnBA,IAAKC,EADc,EACdA,QACPtQ,EAAkBhI,cAExB,OACE,cAACuY,GAAD,UACE,eAAC,IAAD,CAAYC,YAAcF,EAAc,EAAJ,EAAO7P,KAAK,KAAKiG,QAAQ,SAA7D,UACE,cAAC,IAAD,CAAgB+J,GAAIxI,KAAMK,GAAE,UAAK+H,GAAjC,SACGrQ,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAgByQ,GAAIxI,KAAMK,GAAE,UAAK+H,EAAL,YAA5B,SACGrQ,EAAgB,IAAK,oBAS1BuQ,GAAUhQ,IAAOC,IAAV,M,2JCxBED,WAAOC,IAAtB,MACsB,qBAAGO,MAAkBC,OAAO0P,c,4jBCmBlD,IAoFMC,GAAOpQ,IAAOC,IAAV,MAEC,qBAAGO,MAAkBC,OAAOqB,WA4BxBuO,GAjHQ,WAAO,IACpBC,EAAST,cAATS,KACF7Q,EAAkBhI,cAChBkF,EAAYrE,cAAZqE,QAEF4T,GADQnC,cACAoC,YAAS7T,IAEjBqO,GADcuD,cACN9P,eAcRgS,GAbYpC,cAaGkC,EAAMrX,KAAI,SAACkC,GACZA,EAAKG,aAAiBC,IAAaC,QAArD,IAYM+S,EAAmB,IAAItS,IAAU,GACjCoT,EAAoB,IAAIpT,IAAU,GAElCqT,EAA0Bf,EAAiBhR,MAAMpC,EAAKkS,eAAe9P,MAAM+D,KAC3EiO,EAA0BF,EAAkB9R,MAAM1B,YAAiBV,EAAK6N,cACxEuB,EAAM+E,EAAwBtP,IAAIuP,GAAyBhS,MAAM,KAEvE,OAAO,2BACFpC,GADL,IAEEkH,WAA4B,IAAhBlH,EAAKC,SAAuBD,EAAKkH,YAAc0I,EAAQ5P,EAAKuP,UACxEH,YA5CuB,EAgDQkG,IAAUD,GAAc,SAACrV,GAAD,OAAUA,EAAKkH,cAhD/C,mBAgDpBqO,EAhDoB,KAgDLC,EAhDK,KAkD3B,OACE,eAACC,EAAA,EAAD,WACE,cAACT,GAAD,UACE,8BACE,cAAC,IAAD,CAASF,GAAG,KAAKhQ,KAAK,MAAM4Q,GAAG,OAAOnH,MAAO,CAAE/F,MAAO,UAAtD,SACGnE,EAAgB,IAAK,uBAI5B,cAAC,GAAD,IACA,cAACsR,GAAD,IACA,eAACC,EAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACX,KAAI,UAAKA,GAAtB,SACGY,IAAQN,EAAW,CAAC,cAAc1X,KAAI,SAACkC,GACtC,OAAIA,EAAK+V,eAAiB/V,EAAKmP,oBACtB,cAAC,GAAD,CAA4BnP,KAAMA,GAAnBA,EAAKC,QAEtB,cAAC+V,GAAD,CAA8BhW,KAAMA,GAAnBA,EAAKC,aAGjC,cAAC,IAAD,CAAOiV,KAAI,UAAKA,EAAL,YAAX,SACGY,IAAQP,EAAe,CAAC,cAAczX,KAAI,SAACkC,GAC1C,OAAIA,EAAK+V,eAAiB/V,EAAKmP,oBACtB,cAAC,GAAD,CAA4BnP,KAAMA,GAAnBA,EAAKC,QAEtB,cAAC+V,GAAD,CAA8BhW,KAAMA,GAAnBA,EAAKC","file":"static/js/11.d3fbc8f9.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\nimport univ2lp from 'config/abi/uni_v2_lp.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return useContract(nftMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return useContract(nftAbi, address)\n}\n\nexport const useNFTFarmContract = (address: string) => {\n  const nftFarmAbi = (nftFarm as unknown) as AbiItem\n  return useContract(nftFarmAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useLP = (address: string) => {\n  const lpAbi = (univ2lp as unknown) as AbiItem\n  return useContract(lpAbi, address)\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an NFT\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface LabelProps {\n  text?: string\n  isFinished?: boolean\n}\n\nconst Label: React.FC<LabelProps> = ({ text, isFinished = false }) => (\n  <StyledLabel isFinished={isFinished}>{text}</StyledLabel>\n)\n\nconst StyledLabel = styled.div<{ isFinished: boolean }>`\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'primary']};\n  font-size: 14px;\n`\n\nexport default Label\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [1]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport styled from 'styled-components'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface TextProps {\n  isDisabled?: boolean\n  fontSize?: string\n  color?: string\n}\n\ninterface BalanceProps extends TextProps {\n  value?: number\n  decimals?: number\n  unit?: string\n}\n\nconst StyledText = styled(Text)<TextProps>`\n  color: ${({ isDisabled, color, theme }) => (isDisabled ? theme.colors.textDisabled : color)};\n`\n\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit }) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n\n  return (\n    <StyledText bold color={color} fontSize={fontSize} isDisabled={isDisabled}>\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {value && unit && <span>{unit}</span>}\n    </StyledText>\n  )\n}\n\nBalance.defaultProps = {\n  fontSize: '32px',\n  isDisabled: false,\n  color: 'text',\n  decimals: 3,\n}\n\nexport default Balance\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from '../../../components/TokenInput'\nimport useI18n from '../../../hooks/useI18n'\nimport { getFullDisplayBalance } from '../../../utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          fullWidth\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from '../../../components/TokenInput'\nimport useI18n from '../../../hooks/useI18n'\nimport { getFullDisplayBalance } from '../../../utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport React, { useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport Balance from 'components/Balance'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  earnings: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst CompoundModal: React.FC<DepositModalProps> = ({ earnings, onConfirm, onDismiss, tokenName = '' }) => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(earnings)\n  }, [earnings])\n\n  return (\n    <Modal\n      title={`${TranslateString(999, 'Compound')} ${TranslateString(330, `${tokenName} Earned`)}`}\n      onDismiss={onDismiss}\n    >\n      <BalanceRow>\n        <Balance value={Number(fullBalance)} />\n      </BalanceRow>\n      <ModalActions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          id=\"compound-cake\"\n          fullWidth\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(fullBalance)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default CompoundModal\n\nconst BalanceRow = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: row;\n`\n","import styled from 'styled-components'\n\ninterface StyledTitleProps {\n  isFinished?: boolean\n}\n\nconst CardTitle = styled.div<StyledTitleProps>`\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'text']};\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 1.1;\n  margin-bottom: 14px;\n`\n\nexport default CardTitle\n","import styled from 'styled-components'\n\nconst Card = styled.div<{ isActive?: boolean; isFinished?: boolean }>`\n  background: ${(props) => props.theme.card.background};\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  border-radius: 32px;\n  display: flex;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: ${({ isActive }) =>\n    isActive\n      ? '0px 0px 0px 1px #0098A1, 0px 0px 4px 8px rgba(31, 199, 212, 0.4);'\n      : '0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05)'};\n  flex-direction: column;\n  position: relative;\n`\n\nexport default Card\n","import React from 'react'\nimport styled from 'styled-components'\nimport CardTitle from './CardTitle'\n\ninterface Props {\n  hasBalance?: boolean\n}\n\nconst Title = styled.div`\n  color: #ed4b9e;\n  font-size: 24px;\n  font-weight: 600;\n  text-transform: uppercase;\n`\n\nconst ActionLink = styled.a`\n  color: #ed4b9e;\n  font-size: 14px;\n`\n\nconst OldSyrupTitle: React.FC<Props> = ({ hasBalance = false }) => {\n  if (hasBalance) {\n    return (\n      <div>\n        <Title>Action Required</Title>\n        <ActionLink\n          href=\" https://pancakeswap.medium.com/urgent-action-required-changes-to-syrup-pools-70b98d7b2541\"\n          target=\"_blank\"\n        >\n          What do I need to do?\n        </ActionLink>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <CardTitle isFinished>FINISHED</CardTitle>\n    </div>\n  )\n}\n\nexport default OldSyrupTitle\n","import React, { useContext, useMemo } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\nimport { Link } from 'react-router-dom'\n\ninterface ButtonProps {\n  children?: React.ReactNode\n  disabled?: boolean\n  href?: string\n  onClick?: () => void\n  size?: 'sm' | 'md' | 'lg'\n  text?: string\n  to?: string\n  variant?: 'default' | 'secondary' | 'tertiary'\n}\n\nconst Button: React.FC<ButtonProps> = ({ children, disabled, href, onClick, size, text, to }) => {\n  const { colors, spacing } = useContext(ThemeContext)\n  const buttonColor = colors.background\n\n  let boxShadow: string\n  let buttonSize: number\n  let buttonPadding: number\n  let fontSize: number\n  switch (size) {\n    case 'sm':\n      buttonPadding = spacing[3]\n      buttonSize = 36\n      fontSize = 14\n      break\n    case 'lg':\n      buttonPadding = spacing[4]\n      buttonSize = 72\n      fontSize = 16\n      break\n    case 'md':\n    default:\n      buttonPadding = spacing[4]\n      buttonSize = 56\n      fontSize = 16\n  }\n\n  const ButtonChild = useMemo(() => {\n    if (to) {\n      return <StyledLink to={to}>{text}</StyledLink>\n    }\n    if (href) {\n      return (\n        <StyledExternalLink href={href} target=\"__blank\">\n          {text}\n        </StyledExternalLink>\n      )\n    }\n    return text\n  }, [href, text, to])\n\n  return (\n    <StyledButton\n      boxShadow={boxShadow}\n      color={buttonColor}\n      disabled={disabled}\n      fontSize={fontSize}\n      onClick={onClick}\n      padding={buttonPadding}\n      size={buttonSize}\n    >\n      {children}\n      {ButtonChild}\n    </StyledButton>\n  )\n}\n\ninterface StyledButtonProps {\n  boxShadow: string\n  color: string\n  disabled?: boolean\n  fontSize: number\n  padding: number\n  size: number\n}\n\nconst StyledButton = styled.button<StyledButtonProps>`\n  align-items: center;\n  background: ${(props) => (!props.disabled ? props.theme.card.background : `#ddd`)};\n  border: 0;\n  border-radius: 12px;\n  color: ${(props) => (!props.disabled ? `#32cad7` : `#acaaaf`)};\n  cursor: pointer;\n  display: flex;\n  font-size: ${(props) => props.fontSize}px;\n  font-weight: 700;\n  height: ${(props) => props.size}px;\n  justify-content: center;\n  outline: none;\n  padding-left: ${(props) => props.padding}px;\n  padding-right: ${(props) => props.padding}px;\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\n  width: 100%;\n  border: 2px solid ${(props) => (!props.disabled ? `#33cbd7` : `#eee`)};\n  width: 100px;\n  height: 30px;\n  font-size: 14px;\n  padding: 0px;\n`\n\nconst StyledLink = styled(Link)`\n  align-items: center;\n  color: inherit;\n  display: flex;\n  flex: 1;\n  height: 56px;\n  justify-content: center;\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n  text-decoration: none;\n`\n\nconst StyledExternalLink = styled.a`\n  align-items: center;\n  color: inherit;\n  display: flex;\n  flex: 1;\n  height: 56px;\n  justify-content: center;\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n  text-decoration: none;\n`\n\nexport default Button\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport Balance from 'components/Balance'\nimport { CommunityTag, CoreTag, BinanceTag } from 'components/Tags'\nimport { PoolCategory } from 'config/constants/types'\n\nconst tags = {\n  [PoolCategory.BINANCE]: BinanceTag,\n  [PoolCategory.CORE]: CoreTag,\n  [PoolCategory.COMMUNITY]: CommunityTag,\n}\n\ninterface Props {\n  projectLink: string\n  totalStaked: BigNumber\n  blocksRemaining: number\n  isFinished: boolean\n  blocksUntilStart: number\n  poolCategory: PoolCategory\n  stakingTokenName: string\n}\n\nconst StyledFooter = styled.div<{ isFinished: boolean }>`\n  border-top: 1px solid ${({ theme }) => (theme.isDark ? '#524B63' : '#E9EAEB')};\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled2' : 'primary2']};\n  padding: 24px;\n`\n\nconst StyledDetailsButton = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  cursor: pointer;\n  display: inline-flex;\n  font-size: 16px;\n  font-weight: 600;\n  height: 32px;\n  justify-content: center;\n  outline: 0;\n  padding: 0;\n  &:hover {\n    opacity: 0.9;\n  }\n\n  & > svg {\n    margin-left: 4px;\n  }\n`\n\nconst Details = styled.div`\n  margin-top: 24px;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst FlexFull = styled.div`\n  flex: 1;\n`\nconst Label = styled.div`\n  font-size: 14px;\n`\nconst TokenLink = styled.a`\n  font-size: 14px;\n  text-decoration: none;\n  color: #12aab5;\n`\n\nconst CardFooter: React.FC<Props> = ({\n  projectLink,\n  totalStaked,\n  blocksRemaining,\n  isFinished,\n  blocksUntilStart,\n  poolCategory,\n  stakingTokenName,\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const TranslateString = useI18n()\n  const Icon = isOpen ? ChevronUp : ChevronDown\n\n  const handleClick = () => setIsOpen(!isOpen)\n  const Tag = tags[poolCategory]\n\n  return (\n    <StyledFooter isFinished={isFinished}>\n      <Row>\n        <FlexFull>\n          <Tag />\n        </FlexFull>\n        <StyledDetailsButton onClick={handleClick}>\n          {isOpen ? 'Hide' : 'Details'} <Icon />\n        </StyledDetailsButton>\n      </Row>\n      {isOpen && (\n        <Details>\n          <Row style={{ marginBottom: '4px' }}>\n            <FlexFull>\n              <Label>\n                <span role=\"img\" aria-label=\"syrup\">\n                  🥞{' '}\n                </span>\n                Total {stakingTokenName} Staked\n              </Label>\n            </FlexFull>\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBalanceNumber(totalStaked)} />\n          </Row>\n          {/* {blocksUntilStart > 0 && (\n            <Row>\n              <FlexFull>\n                <Label>{TranslateString(410, 'Start')}:</Label>\n              </FlexFull>\n              <Balance fontSize=\"14px\" isDisabled={isFinished} value={blocksUntilStart} decimals={0} />\n            </Row>\n          )} */}\n          {blocksRemaining > 0 && (\n            <Row>\n              <FlexFull>\n                <Label>{TranslateString(410, 'Remaining Blocks')}:</Label>\n              </FlexFull>\n              <Balance fontSize=\"14px\" isDisabled={isFinished} value={blocksRemaining} decimals={0} />\n            </Row>\n          )}\n          <TokenLink href={projectLink} target=\"_blank\">\n            {TranslateString(412, 'View project site')}\n          </TokenLink>\n        </Details>\n      )}\n    </StyledFooter>\n  )\n}\n\nexport default React.memo(CardFooter)\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, IconButton, useModal, AddIcon, Image } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport UnlockButton from 'components/UnlockButton'\nimport Label from 'components/Label'\nimport { useERC20 } from 'hooks/useContract'\nimport { useSousApprove } from 'hooks/useApprove'\nimport useI18n from 'hooks/useI18n'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useBlock from 'hooks/useBlock'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport Balance from 'components/Balance'\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport DepositModal from './DepositModal'\nimport WithdrawModal from './WithdrawModal'\nimport CompoundModal from './CompoundModal'\nimport CardTitle from './CardTitle'\nimport Card from './Card'\nimport OldSyrupTitle from './OldSyrupTitle'\nimport HarvestButton from './HarvestButton'\nimport CardFooter from './CardFooter'\n\ninterface PoolWithApy extends Pool {\n  apy: BigNumber\n}\n\ninterface HarvestProps {\n  pool: PoolWithApy\n}\n\nconst PoolCard: React.FC<HarvestProps> = ({ pool }) => {\n  const {\n    sousId,\n    image,\n    tokenName,\n    stakingTokenName,\n    stakingTokenAddress,\n    projectLink,\n    harvest,\n    apy,\n    tokenDecimals,\n    poolCategory,\n    totalStaked,\n    startBlock,\n    endBlock,\n    isFinished,\n    userData,\n    stakingLimit,\n  } = pool\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const TranslateString = useI18n()\n  const stakingTokenContract = useERC20(stakingTokenAddress)\n  const { account } = useWallet()\n  const block = useBlock()\n  const { onApprove } = useSousApprove(stakingTokenContract, sousId)\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId)\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const allowance = new BigNumber(userData?.allowance || 0)\n  const stakingTokenBalance = new BigNumber(userData?.stakingTokenBalance || 0)\n  const stakedBalance = new BigNumber(userData?.stakedBalance || 0)\n  const earnings = new BigNumber(userData?.pendingReward || 0)\n\n  const blocksUntilStart = Math.max(startBlock - block, 0)\n  const blocksRemaining = Math.max(endBlock - block, 0)\n  const isOldSyrup = stakingTokenName === QuoteToken.SYRUP\n  const accountHasStakedBalance = stakedBalance?.toNumber() > 0\n  const needsApproval = !accountHasStakedBalance && !allowance.toNumber() && !isBnbPool\n  const isCardActive = isFinished && accountHasStakedBalance\n\n  const convertedLimit = new BigNumber(stakingLimit).multipliedBy(new BigNumber(10).pow(tokenDecimals))\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={stakingLimit && stakingTokenBalance.isGreaterThan(convertedLimit) ? convertedLimit : stakingTokenBalance}\n      onConfirm={onStake}\n      tokenName={stakingLimit ? `${stakingTokenName} (${stakingLimit} max)` : stakingTokenName}\n    />,\n  )\n\n  const [onPresentCompound] = useModal(\n    <CompoundModal earnings={earnings} onConfirm={onStake} tokenName={stakingTokenName} />,\n  )\n\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={stakingTokenName} />,\n  )\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, setRequestedApproval])\n\n  return (\n    <Card\n      isActive={isCardActive}\n      isFinished={isFinished && sousId !== 0}\n      style={{ backdropFilter: 'blur(3px)', background: 'rgba(39, 38, 44, 0.8)' }}\n    >\n      {isFinished && sousId !== 0 && <PoolFinishedSash />}\n      <div style={{ padding: '24px' }}>\n        <CardTitle isFinished={isFinished && sousId !== 0}>\n          {isOldSyrup && '[OLD]'} {tokenName} {TranslateString(348, 'Pool')}\n        </CardTitle>\n        <div style={{ marginBottom: '8px', display: 'flex', alignItems: 'center' }}>\n          <div style={{ flex: 1 }}>\n            <Image src={`/images/tokens/${image || tokenName}.png`} width={64} height={64} alt={tokenName} />\n          </div>\n          {account && harvest && !isOldSyrup && (\n            <HarvestButton\n              disabled={!earnings.toNumber() || pendingTx}\n              text={pendingTx ? 'Collecting' : 'Harvest'}\n              onClick={async () => {\n                setPendingTx(true)\n                await onReward()\n                setPendingTx(false)\n              }}\n            />\n          )}\n        </div>\n        {!isOldSyrup ? (\n          <BalanceAndCompound>\n            <Balance value={getBalanceNumber(earnings, tokenDecimals)} isDisabled={isFinished} />\n            {sousId === 0 && account && harvest && (\n              <HarvestButton\n                disabled={!earnings.toNumber() || pendingTx}\n                text={pendingTx ? TranslateString(999, 'Compounding') : TranslateString(999, 'Compound')}\n                onClick={onPresentCompound}\n              />\n            )}\n          </BalanceAndCompound>\n        ) : (\n          <OldSyrupTitle hasBalance={accountHasStakedBalance} />\n        )}\n        <Label isFinished={isFinished && sousId !== 0} text={TranslateString(330, `${tokenName} earned`)} />\n        <StyledCardActions>\n          {!account && <UnlockButton />}\n          {account &&\n            (needsApproval && !isOldSyrup ? (\n              <div style={{ flex: 1 }}>\n                <Button disabled={isFinished || requestedApproval} onClick={handleApprove} fullWidth>\n                  {`Approve ${stakingTokenName}`}\n                </Button>\n              </div>\n            ) : (\n              <>\n                <Button\n                  disabled={stakedBalance.eq(new BigNumber(0)) || pendingTx}\n                  onClick={\n                    isOldSyrup\n                      ? async () => {\n                          setPendingTx(true)\n                          await onUnstake('0')\n                          setPendingTx(false)\n                        }\n                      : onPresentWithdraw\n                  }\n                >\n                  {`Unstake ${stakingTokenName}`}\n                </Button>\n                <StyledActionSpacer />\n                {!isOldSyrup && (\n                  <IconButton disabled={isFinished && sousId !== 0} onClick={onPresentDeposit}>\n                    <AddIcon color=\"background\" />\n                  </IconButton>\n                )}\n              </>\n            ))}\n        </StyledCardActions>\n        <StyledDetails>\n          <div style={{ flex: 1 }}>{TranslateString(736, 'APY')}:</div>\n          {isFinished || isOldSyrup || !apy || apy?.isNaN() || !apy?.isFinite() ? (\n            '-'\n          ) : (\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={apy?.toNumber()} decimals={2} unit=\"%\" />\n          )}\n        </StyledDetails>\n        <StyledDetails>\n          <div style={{ flex: 1 }}>\n            <span role=\"img\" aria-label={stakingTokenName}>\n              🥞{' '}\n            </span>\n            {TranslateString(384, 'Your Stake')}:\n          </div>\n          <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBalanceNumber(stakedBalance)} />\n        </StyledDetails>\n      </div>\n      <CardFooter\n        projectLink={projectLink}\n        totalStaked={totalStaked}\n        blocksRemaining={blocksRemaining}\n        isFinished={isFinished}\n        blocksUntilStart={blocksUntilStart}\n        poolCategory={poolCategory}\n        stakingTokenName={stakingTokenName}\n      />\n    </Card>\n  )\n}\n\nconst PoolFinishedSash = styled.div`\n  background-image: url('/images/pool-finished-sash.svg');\n  background-position: top right;\n  background-repeat: not-repeat;\n  height: 135px;\n  position: absolute;\n  right: -24px;\n  top: -24px;\n  width: 135px;\n`\n\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 16px 0;\n  width: 100%;\n  box-sizing: border-box;\n`\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: row;\n`\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledDetails = styled.div`\n  display: flex;\n  font-size: 14px;\n`\n\nexport default PoolCard\n","import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config'\n\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (stakingTokenPrice, rewardTokenPrice, totalStaked, tokenPerBlock) => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApr = (poolWeight, cakePriceUsd, poolLiquidityUsd) => {\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\nexport const getLPprice = async () => {\n  const response = await fetch('https://api.pancakeswap.info/api/v2/pairs')\n  const data = await response.json()\n\n  return data.data\n}\n\nexport default null\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, IconButton, useModal, AddIcon, Image } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport UnlockButton from 'components/UnlockButton'\nimport Label from 'components/Label'\nimport { useERC20, useLP } from 'hooks/useContract'\nimport { useSousApprove } from 'hooks/useApprove'\nimport useI18n from 'hooks/useI18n'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useBlock from 'hooks/useBlock'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport Balance from 'components/Balance'\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport { useGetApiPrice, useFarms, usePriceBnbBusd, useSTOSPrice } from 'state/hooks'\nimport { getPoolApr, getLPprice } from 'utils/apr'\nimport DepositModal from './DepositModal'\nimport WithdrawModal from './WithdrawModal'\nimport CompoundModal from './CompoundModal'\nimport CardTitle from './CardTitle'\nimport Card from './Card'\nimport OldSyrupTitle from './OldSyrupTitle'\nimport HarvestButton from './HarvestButton'\nimport CardFooter from './CardFooter'\n\ninterface HarvestProps {\n  pool: Pool\n}\n\nconst PoolCard: React.FC<HarvestProps> = ({ pool }) => {\n  const {\n    sousId,\n    image,\n    tokenName,\n    stakingTokenName,\n    stakingTokenAddress,\n    projectLink,\n    harvest,\n    tokenDecimals,\n    poolCategory,\n    totalStaked,\n    startBlock,\n    endBlock,\n    isFinished,\n    userData,\n    stakingLimit,\n    tokenPerBlock,\n  } = pool\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const TranslateString = useI18n()\n  const stakingTokenContract = useERC20(stakingTokenAddress)\n  const lpTokenContract = useLP(stakingTokenAddress)\n\n  const [apy, setAPY] = useState(new BigNumber(0))\n\n  const [liquidity, setLiquidity] = useState(new BigNumber(0))\n  const [totalSupply, setTotalSupply] = useState(new BigNumber(0))\n\n  const [reserve0, setReserve0] = useState(new BigNumber(0))\n  const [reserve1, setReserve1] = useState(new BigNumber(0))\n\n  const [token0, setToken0] = useState()\n  const [token1, setToken1] = useState()\n\n  const { account } = useWallet()\n  const block = useBlock()\n  const { onApprove } = useSousApprove(stakingTokenContract, sousId)\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId)\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const farms = useFarms()\n\n  // APR\n  // const rewardTokenPrice = useGetApiPrice(pool.earningToken ? pool.earningToken : '')\n\n  // const token0price = useGetApiPrice(token0 !== undefined ? token0 : '')\n  // const token1price = useGetApiPrice(token1 !== undefined ? token1 : '')\n\n  const token0price = useSTOSPrice()\n  const token1price = usePriceBnbBusd()\n  const rewardTokenPrice = useSTOSPrice()\n\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const allowance = new BigNumber(userData?.allowance || 0)\n  const stakingTokenBalance = new BigNumber(userData?.stakingTokenBalance || 0)\n  const stakedBalance = new BigNumber(userData?.stakedBalance || 0)\n  const earnings = new BigNumber(userData?.pendingReward || 0)\n\n  const blocksUntilStart = Math.max(startBlock - block, 0)\n  const blocksRemaining = Math.max(endBlock - block, 0)\n  const isOldSyrup = stakingTokenName === QuoteToken.SYRUP\n  const accountHasStakedBalance = stakedBalance?.toNumber() > 0\n  const needsApproval = !accountHasStakedBalance && !allowance.toNumber() && !isBnbPool\n  const isCardActive = isFinished && accountHasStakedBalance\n\n  const convertedLimit = new BigNumber(stakingLimit).multipliedBy(new BigNumber(10).pow(tokenDecimals))\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={stakingLimit && stakingTokenBalance.isGreaterThan(convertedLimit) ? convertedLimit : stakingTokenBalance}\n      onConfirm={onStake}\n      tokenName={stakingLimit ? `${stakingTokenName} (${stakingLimit} max)` : stakingTokenName}\n    />,\n  )\n\n  const [onPresentCompound] = useModal(\n    <CompoundModal earnings={earnings} onConfirm={onStake} tokenName={stakingTokenName} />,\n  )\n\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={stakingTokenName} />,\n  )\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, setRequestedApproval])\n\n  React.useEffect(() => {\n    if (stakingTokenAddress !== undefined) {\n      lpTokenContract.methods\n        .token0()\n        .call()\n        .then((res0) => {\n          setToken0(res0)\n          lpTokenContract.methods\n            .token1()\n            .call()\n            .then((res1) => {\n              setToken1(res1)\n              lpTokenContract.methods\n                .totalSupply()\n                .call()\n                .then((res2) => {\n                  setTotalSupply(new BigNumber(res2))\n                  lpTokenContract.methods\n                    .getReserves()\n                    .call()\n                    .then((reserves) => {\n                      setReserve0(new BigNumber(getBalanceNumber(reserves._reserve0)))\n                      setReserve1(new BigNumber(getBalanceNumber(reserves._reserve1)))\n                    })\n                })\n            })\n        })\n    }\n  }, [lpTokenContract, stakingTokenAddress])\n\n  React.useEffect(() => {\n    if (token0 !== undefined && token1 !== undefined && reserve0 !== undefined && reserve1 !== undefined) {\n      const pair = (token0 !== undefined ? token0 : '').concat('_').concat(token1)\n      getLPprice().then((data) => {\n        // setLiquidity(new BigNumber(data[pair].liquidity))\n\n        // console.log('pairData:', data[pair])\n\n        // console.log('reserve0:', reserve0.toString())\n        // console.log('reserve1:', reserve1.toString())\n\n        const baseValue = new BigNumber(token0price).times(reserve0)\n        const quoteValue = new BigNumber(token1price).times(reserve1)\n\n        const totalValue = baseValue.plus(quoteValue)\n        const lpTokenPrice = totalValue.div(getBalanceNumber(totalSupply)).times(token0price)\n\n        // console.log('totalSupply:', getBalanceNumber(totalSupply).toString())\n        // console.log('token0price:', token0price.toString())\n        // console.log('token1price:', token1price.toString())\n\n        // console.log('baseValue:', baseValue.toString())\n        // console.log('quoteValue:', quoteValue.toString())\n        // console.log('totalValue:', totalValue.toString())\n        // console.log('lpTokenPrice:', lpTokenPrice.toString())\n\n        const apr = getPoolApr(\n          lpTokenPrice,\n          rewardTokenPrice,\n          getBalanceNumber(pool.totalStaked, pool.tokenDecimals),\n          parseFloat(pool.tokenPerBlock),\n        )\n        setAPY(new BigNumber(apr))\n        // console.log('APR:', apr)\n      })\n    }\n  }, [token0, token1, token0price, token1price, totalSupply, pool, rewardTokenPrice, reserve0, reserve1])\n\n  return (\n    <Card\n      isActive={isCardActive}\n      isFinished={isFinished && sousId !== 0}\n      style={{ backdropFilter: 'blur(3px)', background: 'rgba(39, 38, 44, 0.8)' }}\n    >\n      {isFinished && sousId !== 0 && <PoolFinishedSash />}\n      <div style={{ padding: '24px' }}>\n        <CardTitle isFinished={isFinished && sousId !== 0}>\n          {isOldSyrup && '[OLD]'} {tokenName} {TranslateString(348, 'Pool')}\n        </CardTitle>\n        <div style={{ marginBottom: '8px', display: 'flex', alignItems: 'center' }}>\n          <div style={{ flex: 1 }}>\n            <Image src={`/images/tokens/${image || tokenName}.png`} width={64} height={64} alt={tokenName} />\n          </div>\n          {account && harvest && !isOldSyrup && (\n            <HarvestButton\n              disabled={!earnings.toNumber() || pendingTx}\n              text={pendingTx ? 'Collecting' : 'Harvest'}\n              onClick={async () => {\n                setPendingTx(true)\n                await onReward()\n                setPendingTx(false)\n              }}\n            />\n          )}\n        </div>\n        {!isOldSyrup ? (\n          <BalanceAndCompound>\n            <Balance value={getBalanceNumber(earnings, tokenDecimals)} isDisabled={isFinished} />\n            {sousId === 0 && account && harvest && (\n              <HarvestButton\n                disabled={!earnings.toNumber() || pendingTx}\n                text={pendingTx ? TranslateString(999, 'Compounding') : TranslateString(999, 'Compound')}\n                onClick={onPresentCompound}\n              />\n            )}\n          </BalanceAndCompound>\n        ) : (\n          <OldSyrupTitle hasBalance={accountHasStakedBalance} />\n        )}\n        <Label isFinished={isFinished && sousId !== 0} text={TranslateString(330, `${tokenName} earned`)} />\n        <StyledCardActions>\n          {!account && <UnlockButton />}\n          {account &&\n            (needsApproval && !isOldSyrup ? (\n              <div style={{ flex: 1 }}>\n                <Button disabled={isFinished || requestedApproval} onClick={handleApprove} fullWidth>\n                  {`Approve ${stakingTokenName}`}\n                </Button>\n              </div>\n            ) : (\n              <>\n                <Button\n                  disabled={stakedBalance.eq(new BigNumber(0)) || pendingTx}\n                  onClick={\n                    isOldSyrup\n                      ? async () => {\n                          setPendingTx(true)\n                          await onUnstake('0')\n                          setPendingTx(false)\n                        }\n                      : onPresentWithdraw\n                  }\n                >\n                  {`Unstake ${stakingTokenName}`}\n                </Button>\n                <StyledActionSpacer />\n                {!isOldSyrup && (\n                  <IconButton disabled={isFinished && sousId !== 0} onClick={onPresentDeposit}>\n                    <AddIcon color=\"background\" />\n                  </IconButton>\n                )}\n              </>\n            ))}\n        </StyledCardActions>\n        <StyledDetails>\n          <div style={{ flex: 1 }}>{TranslateString(736, 'APY')}:</div>\n          {isFinished || isOldSyrup || !apy || apy?.isNaN() || !apy?.isFinite() ? (\n            '-'\n          ) : (\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={apy?.toNumber()} decimals={2} unit=\"%\" />\n          )}\n        </StyledDetails>\n        <StyledDetails>\n          <div style={{ flex: 1 }}>\n            <span role=\"img\" aria-label={stakingTokenName}>\n              🥞{' '}\n            </span>\n            {TranslateString(384, 'Your Stake')}:\n          </div>\n          <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBalanceNumber(stakedBalance)} />\n        </StyledDetails>\n      </div>\n      <CardFooter\n        projectLink={projectLink}\n        totalStaked={totalStaked}\n        blocksRemaining={blocksRemaining}\n        isFinished={isFinished}\n        blocksUntilStart={blocksUntilStart}\n        poolCategory={poolCategory}\n        stakingTokenName={stakingTokenName}\n      />\n    </Card>\n  )\n}\n\nconst PoolFinishedSash = styled.div`\n  background-image: url('/images/pool-finished-sash.svg');\n  background-position: top right;\n  background-repeat: not-repeat;\n  height: 135px;\n  position: absolute;\n  right: -24px;\n  top: -24px;\n  width: 135px;\n`\n\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 16px 0;\n  width: 100%;\n  box-sizing: border-box;\n`\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: row;\n`\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledDetails = styled.div`\n  display: flex;\n  font-size: 14px;\n`\n\nexport default PoolCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst PoolTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={!isExact ? 1 : 0} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(999, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(999, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default PoolTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useFarms, usePriceBnbBusd, usePools, useSTOSPrice } from 'state/hooks'\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport Coming from './components/Coming'\nimport PoolCard from './components/PoolCard'\nimport PoolCardLP from './components/PoolCardLP'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport Divider from './components/Divider'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\nconst Farm: React.FC = () => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const farms = useFarms()\n  const pools = usePools(account)\n  const bnbPriceUSD = usePriceBnbBusd()\n  const block = useBlock()\n  const stosPrice = useSTOSPrice()\n\n  const priceToBnb = (tokenName: string, tokenPrice: BigNumber, quoteToken: QuoteToken): BigNumber => {\n    const tokenPriceBN = new BigNumber(tokenPrice)\n    if (tokenName === 'BNB') {\n      return new BigNumber(1)\n    }\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\n      return tokenPriceBN.div(bnbPriceUSD)\n    }\n    return tokenPriceBN\n  }\n\n  const poolsWithApy = pools.map((pool) => {\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE\n    // const rewardTokenFarm = farms.find((f) => f.tokenSymbol === pool.quoteTokenSymbol)\n    // const stakingTokenFarm = farms.find((s) => s.tokenAddresses[CHAIN_ID] === pool.quoteTokenAdresses[CHAIN_ID])\n\n    // /!\\ Assume that the farm quote price is BNB\n    // const stakingTokenPriceInBNB = isBnbPool ? new BigNumber(1) : new BigNumber(stakingTokenFarm?.tokenPriceVsQuote)\n    // const rewardTokenPriceInBNB = priceToBnb(\n    //   pool.tokenName,\n    //   rewardTokenFarm?.tokenPriceVsQuote,\n    //   rewardTokenFarm?.quoteTokenSymbol,\n    // )\n\n    const rewardTokenPrice = new BigNumber(1)\n    const stakingTokenPrice = new BigNumber(1)\n\n    const totalRewardPricePerYear = rewardTokenPrice.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR)\n    const totalStakingTokenInPool = stakingTokenPrice.times(getBalanceNumber(pool.totalStaked))\n    const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n\n    return {\n      ...pool,\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\n      apy,\n    }\n  })\n\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\n\n  return (\n    <Page>\n      <Hero>\n        <div>\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\" style={{ color: 'orange' }}>\n            {TranslateString(282, 'Earn SafeSTOS')}\n          </Heading>\n        </div>\n      </Hero>\n      <PoolTabButtons />\n      <Divider />\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {orderBy(openPools, ['sortOrder']).map((pool) => {\n            if (pool.earningToken === pool.stakingTokenAddress) {\n              return <PoolCard key={pool.sousId} pool={pool} />\n            }\n            return <PoolCardLP key={pool.sousId} pool={pool} />\n          })}\n        </Route>\n        <Route path={`${path}/history`}>\n          {orderBy(finishedPools, ['sortOrder']).map((pool) => {\n            if (pool.earningToken === pool.stakingTokenAddress) {\n              return <PoolCard key={pool.sousId} pool={pool} />\n            }\n            return <PoolCardLP key={pool.sousId} pool={pool} />\n          })}\n        </Route>\n      </FlexLayout>\n    </Page>\n  )\n}\n\nconst Hero = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 250px;\n  padding: 48px 0;\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    font-size: 16px;\n    li {\n      margin-bottom: 4px;\n    }\n  }\n  img {\n    height: auto;\n    max-width: 100%;\n  }\n  @media (min-width: 576px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0;\n    max-width: none;\n  }\n`\n\nexport default Farm\n"],"sourceRoot":""}