{"version":3,"sources":["utils/formatBalance.ts","utils/callHelpers.ts","hooks/useApprove.ts","utils/erc20.ts","hooks/useTokenBalance.ts","hooks/useAllowance.ts","views/Detail/components/InfoRow.tsx","views/Detail/components/Image.tsx","views/Detail/utils/contracts.ts","views/Detail/contexts/NftProvider.tsx","views/Detail/components/ClaimNftModal.tsx","views/Detail/components/BurnNftModal.tsx","views/Detail/components/TransferNftModal.tsx","views/Detail/components/NftCard/index.tsx","views/Detail/index.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useSousApprove","sousId","dispatch","useDispatch","useWallet","useSousChef","onApprove","useCallback","updateUserAllowance","useNftApprove","tokenContract","spenderAddress","getContract","provider","Web3","eth","Contract","erc20","getAllowance","allowance","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","useTokenBalance","useState","setBalance","ethereum","fastRefresh","useRefresh","useEffect","res","fetchBalance","useNftAllowance","dependency","setAllowance","console","log","fetch","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","href","target","rel","getNftContract","contractOptions","nftAbi","nft","NFT","getFromWayArray","v","array","t","length","i","push","fromWei","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","allowMultipleClaims","priceMultiplier","maxMintPerNft","amounts","maxMintByNft","prices","myMints","state","setState","currentBlock","useBlock","multicall","nftFarm","NftFarm","name","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","priceMultiplierArr","maxMintPerNftArr","prevState","error","fetchContractData","nftContract","params","getMinted","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","nftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","getLifeAddress","cakeBalance","cakeInWallet","handleConfirm","mintNFT","title","tokenAmount","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","AMOUNT_TO_CLAIM","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","InfoBlock","Button","attrs","SmallCard","Card","CustomButton","NftCard","isOpen","nftCount","nftBurnCount","useContext","originalImage","fileType","description","metadata","tokenSupply","nftIndex","indexOf","MINTS","MINTED","MAX_MINT","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","walletCanClaim","undefined","isSupplyAvailable","walletOwnsNft","fetchDetails","ChevronUpIcon","ChevronDownIcon","isDataFetched","handleSuccess","useModal","onPresentClaimModal","onPresentTransferModal","isActive","height","width","loop","autoPlay","muted","kind","outline","mt","window","open","p","as","textAlign","StyledHero","textSubtle","StyledNotFound","CustomHeading","Heading","Detail","props","match","nft1","nfts","filter","Page","size"],"mappings":"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","file":"static/js/12.fabb739b.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an NFT\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n// Retrieve NFT allowance\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.log(e.toString())\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport { NftFarm } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  priceMultiplier: number\n  maxMintPerNft: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n        ] = await multicall(nftFarm, [\n          { address: NftFarm, name: 'startBlockNumber' },\n          { address: NftFarm, name: 'endBlockNumber' },\n          { address: NftFarm, name: 'countBurnt' },\n          { address: NftFarm, name: 'totalSupplyDistributed' },\n          { address: NftFarm, name: 'currentDistributedSupply' },\n          { address: NftFarm, name: 'allowMultipleClaims' },\n          { address: NftFarm, name: 'priceMultiplier' },\n          { address: NftFarm, name: 'maxMintPerNft' }\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    const fetchNonLoggedInContractData = async () => {\n      try {\n        const getMinted = await multicall(nftFarm, [\n          { address: NftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\n        ])\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          amounts,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    } else {\n      fetchNonLoggedInContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { getLifeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n  const contraToken = useERC20(getLifeAddress())\n  const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, NftFarm)\n  const cakeBalance = useTokenBalance(getLifeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getLifeAddress', getLifeAddress(), NftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have STOS balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} STOS`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} STOS</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive STOS, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/nfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n  LogoIcon,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport Page from 'components/layout/Page'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst SmallCard = styled(Card)`\n  width: 500px;\n  margin: 0 auto;\n\n  @media (max-width: 767px) {\n    width: 320px;\n  }\n`\n\nconst CustomButton = styled(Button)`\n  margin-left: 10px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: true,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    priceMultiplier,\n    maxMintPerNft,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n\n  console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, priceMultiplier, maxMintPerNft)\n  console.log('LIMITS BY NFT:', amounts, maxMintByNft, prices)\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  console.log(ownerById)\n\n  const { nftId, name, previewImage, originalImage, fileType, description, metadata, tokenAmount, tokenSupply } = nft\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  const MINTS = myMints[nftIndex] || 0\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\n\n  const hasClaimedArr: any = hasClaimed[0]\n  const ownerByIdArr: any = ownerById[0]\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <SmallCard isActive={walletOwnsNft}>\n      {fileType === 'mp4' && (\n        <video height=\"500px\" width=\"100%\" loop autoPlay muted>\n          <source src={originalImage} type=\"video/mp4\" />\n          <track kind=\"captions\" />\n        </video>\n      )}\n      {fileType !== 'mp4' && (\n        <Image src={originalImage} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      )}\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && !walletCanClaim && (\n            <Tag outline variant=\"failure\">\n              Sold Out\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <Button onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {tokenAmount} STOS\n          </Button>\n        )}\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <CustomButton\n            onClick={() =>\n              window.open(\n                'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\n                '_blank',\n              )\n            }\n            mt=\"24px\"\n          >\n            {TranslateString(999, 'Buy STOS')}\n          </CustomButton>\n        )}\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"2\">\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>\n                {MINTED}/{tokenSupply}\n              </Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Minted By Me')}:</Text>\n              <Value>{MINTS}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </SmallCard>\n  )\n}\n\nexport default NftCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport nfts from 'config/constants/nfts'\nimport NftCard from './components/NftCard'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst CustomHeading = styled(Heading)`\n  text-align: center;\n`\n\nconst Detail = (props) => {\n  const TranslateString = useI18n()\n  const { match } = props\n  const id = parseInt(match.params.id)\n\n  const nft1 = nfts.filter((nft) => nft.nftId === id)\n\n  if (nft1[0]) {\n    return (\n      <NftProvider>\n        <Page>\n          <StyledHero>\n            <CustomHeading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n              {nft1[0] && nft1[0].name}\n            </CustomHeading>\n          </StyledHero>\n          <NftCard nft={nft1[0]} />\n        </Page>\n      </NftProvider>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Heading size=\"xxl\">404</Heading>\n        <Text mb=\"16px\">{TranslateString(999, 'Oops, page not found.')}</Text>\n        <Button as=\"a\" href=\"/\" size=\"sm\">\n          {TranslateString(999, 'Back Home')}\n        </Button>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default Detail\n"],"sourceRoot":""}