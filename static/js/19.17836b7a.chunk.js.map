{"version":3,"sources":["config/constants/nfts.ts","hooks/useBlock.ts","views/MyCollection/utils/contracts.ts","utils/index.ts","utils/getNftDetailData.ts","views/MyCollection/contexts/NftProvider.tsx","views/MyCollection/components/InfoRow.tsx","views/MyCollection/components/TransferNftModal.tsx","views/MyCollection/components/NftTable.tsx","views/MyCollection/components/NftProgressSimple.tsx","views/MyCollection/components/NftInfo.tsx","views/MyCollection/index.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","originalImage","previewImage","blurImage","sortOrder","fileType","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","active","useBlock","useContext","BlockContext","getNftContract","contractOptions","nftAbi","nft","getContract","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","getUrlPartsInfo","fullUrl","fullUrlArray","split","protocol","host","path","slice","join","getNftDetailData","tokenURI","a","data","image","rarity","error","fetch","response","json","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","priceMultiplier","maxMintPerNft","amounts","maxMintByNft","prices","myMints","nftTableData","state","setState","account","useWallet","currentBlock","useEffect","multicall","nftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","priceMultiplierArr","maxMintPerNftArr","prevState","toNumber","console","fetchContractData","params","getMinted","methods","call","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","getNftData","getApproved","approvedStatus","isApproved","nftName","hash","hashId","substring","nftDetailLink","nftPreviewImage","nfts","filter","map","type","tokenIdPromises","nftTablePromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","values","setValues","setError","TranslateString","useI18n","useNFTFarmContract","handleConfirm","Web3","utils","isAddress","transferNft","send","from","on","title","color","mb","htmlFor","id","placeholder","onChange","evt","target","inputValue","isWarning","disabled","fullWidth","variant","onClick","NftTable","isOpen","requestedApproval","setRequestedApproval","onTransfer","useCallback","isDataFetched","err","log","usePancakeRabbits","handleApprove","approve","handleSuccess","columns","dataIndex","render","record","style","fontWeight","fontSize","src","alt","width","height","objectFit","borderRadius","key","as","Link","to","ModalWrapper","onPresentTransferModal","mt","dataSource","marginTop","NftProgressSimple","backdropFilter","background","mediaQueries","sm","NftInfo","StyledHero","textSubtle","StyledNotFound","CustomButton","Button","Nft","useHistory","Page","size"],"mappings":"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","file":"static/js/19.17836b7a.chunk.js","sourcesContent":["import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xAc5A9cA010969C70B97E59d1f2A0089371C3095b'\r\nexport const NFT = '0xd77486cD6C6b1cFD272CF1FE0b13Ac6C58C7C12D'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Main Pass NFT',\r\n    metadata: '',\r\n    description:\r\n      'All inclusive Main Event Venue DJ Concert. Open Bar. Lottery draw for the afterparty exclusive. Transportation to and from all events from approved hotels.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmaAZXjDP9RaccmbqXBmxh9ByfLdxzgJHdb7mSbKVghzd4',\r\n    previewImage: 'preview1.png',\r\n    blurImage: 'swapsies-blur.png',\r\n    sortOrder: 999,\r\n    fileType: 'mp4',\r\n    nftId: 1,\r\n    tokenAmount: 10,\r\n    tokenSupply: 15,\r\n    nftFarmContract: '0xe876d9A1A8AA778c67bf04fe943677Df84eD99AA',\r\n    nftContract: '0x1605854923FC0bDC13F0336C06f4fB1c1e6e83eE',\r\n    active: false,\r\n  },\r\n  {\r\n    name: 'Yacht Pass NFT',\r\n    metadata: '',\r\n    description:\r\n      'All inclusive Yacht Party. Fully Catered. Open Bar. Private DJ. Full day Punta Cana booze cruise sightseeing tour. Main Event NFT’s included! (25 STOS Value). Transportation to and from all events',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/Qmd4dPZsBbqpG1dNr4DxkiVyz9wpVQAhUw2cvqshn9e2Na',\r\n    previewImage: 'preview2.png',\r\n    blurImage: 'drizzle-blur.png',\r\n    sortOrder: 999,\r\n    fileType: 'mp4',\r\n    nftId: 0,\r\n    tokenAmount: 250,\r\n    tokenSupply: 50,\r\n    nftFarmContract: '0xe876d9A1A8AA778c67bf04fe943677Df84eD99AA',\r\n    nftContract: '0x1605854923FC0bDC13F0336C06f4fB1c1e6e83eE',\r\n    active: true,\r\n  },\r\n  {\r\n    name: 'VIP WEEK Pass NFT',\r\n    metadata: '',\r\n    description:\r\n      '5 Bed Villa from a list of oceanfront choices. Personal chef with daily menus. Transportation to and from the events. Yacht Party Admission. Main Event Admission + Afterparty. Party of 8 covered for Villa and all admissions. 4 days, 3 nights (extensions extra)',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmdTZT6LS9AULcvwGSYuDS6oBQ7GuHqKWJcSu1ymX3crXV',\r\n    previewImage: 'preview3.png',\r\n    blurImage: 'blueberries-blur.png',\r\n    sortOrder: 999,\r\n    fileType: 'mp4',\r\n    nftId: 2,\r\n    tokenAmount: 20,\r\n    tokenSupply: 5,\r\n    nftFarmContract: '0xe876d9A1A8AA778c67bf04fe943677Df84eD99AA',\r\n    nftContract: '0x1605854923FC0bDC13F0336C06f4fB1c1e6e83eE',\r\n    active: false,\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/nfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = (nft as unknown) as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import BigNumber from 'bignumber.js'\r\n\r\nexport { default as formatAddress } from './formatAddress'\r\n\r\nexport const bnToDec = (bn: BigNumber, decimals = 18): number => {\r\n  return bn.dividedBy(new BigNumber(10).pow(decimals)).toNumber()\r\n}\r\n\r\n/** Returns parts of URL like protocol, host, path for formatting URLs as required.\r\n * @param  {string} fullUrl\r\n */\r\nexport const getUrlPartsInfo = (fullUrl) => {\r\n  const fullUrlArray = fullUrl.split('/')\r\n  const protocol = fullUrlArray[0]\r\n  const host = fullUrlArray[2]\r\n  const path = fullUrlArray.slice(3).join('/')\r\n  return {\r\n    protocol,\r\n    host,\r\n    path,\r\n    fullUrlArray,\r\n  }\r\n}\r\n","export type DataResponse = {\r\n  name: string\r\n  description: string\r\n  image: string\r\n  rarity: string\r\n\r\n  // TODO: Fill in the error type\r\n  error: any\r\n}\r\n\r\n/**\r\n * Get NFT data for a specific tokenURI\r\n */\r\nconst getNftDetailData = async (tokenURI: string): Promise<DataResponse> => {\r\n  let data = {\r\n    name: '',\r\n    description: '',\r\n    image: '',\r\n    rarity: '',\r\n    error: '',\r\n  }\r\n  try {\r\n    const response = await fetch(tokenURI)\r\n    data = await response.json()\r\n    return data\r\n  } catch (error) {\r\n    return data\r\n  }\r\n}\r\n\r\nexport default getNftDetailData\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport nfts, { NftFarm } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\nimport { getUrlPartsInfo } from '../../../utils'\r\nimport getNftDetailData from '../../../utils/getNftDetailData'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype NftMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  nftTableData: any[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: NftMap\r\n\r\n  allowMultipleClaims: boolean\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n    nftTableData: [],\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [\r\n          startBlockNumberArr,\r\n          endBlockNumberArr,\r\n          countBurntArr,\r\n          totalSupplyDistributedArr,\r\n          currentDistributedSupplyArr,\r\n\r\n          allowMultipleClaimsArr,\r\n          priceMultiplierArr,\r\n          maxMintPerNftArr,\r\n        ] = await multicall(nftFarm, [\r\n          { address: NftFarm, name: 'startBlockNumber' },\r\n          { address: NftFarm, name: 'endBlockNumber' },\r\n          { address: NftFarm, name: 'countBurnt' },\r\n          { address: NftFarm, name: 'totalSupplyDistributed' },\r\n          { address: NftFarm, name: 'currentDistributedSupply' },\r\n          { address: NftFarm, name: 'allowMultipleClaims' },\r\n          { address: NftFarm, name: 'priceMultiplier' },\r\n          { address: NftFarm, name: 'maxMintPerNft' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        const [countBurnt]: [BigNumber] = countBurntArr\r\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          countBurnt: countBurnt.toNumber(),\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n        // console.log('myMints', myMints)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: NftMap = {}\r\n\r\n        let nftTableData = []\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndNftId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\r\n\r\n              return [parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const getNftData = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const tokenURI = await nftContract.methods.tokenURI(parseInt(tokenId, 10)).call()\r\n              const approvedStatus = await nftContract.methods.getApproved(parseInt(tokenId, 10)).call()\r\n              let isApproved = false\r\n              if (approvedStatus !== '0x0000000000000000000000000000000000000000') {\r\n                isApproved = true\r\n              }\r\n              const { name: nftName, rarity } = await getNftDetailData(tokenURI)\r\n\r\n              const { fullUrlArray } = getUrlPartsInfo(tokenURI)\r\n              const hash = fullUrlArray[3]\r\n              const hashId = parseInt(fullUrlArray[4].substring(0, fullUrlArray[4].length - 5), 10)\r\n              const nftDetailLink = `/detail/${hashId}`\r\n\r\n              const nftPreviewImage = nfts.filter((nft) => nftName === nft.name).map((nft) => nft.previewImage)\r\n\r\n              return {\r\n                tokenId: parseInt(tokenId, 10),\r\n                type: `${hash} ,  ${hashId}`,\r\n                nftName,\r\n                nftPreviewImage,\r\n                nftDetailLink,\r\n                isApproved,\r\n              }\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n          const nftTablePromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            nftTablePromises.push(getNftData(i))\r\n            tokenIdPromises.push(getTokenIdAndNftId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n          nftTableData = await Promise.all(nftTablePromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n          nftTableData,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { NFT, NftFarm } from 'config/constants/nfts'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useNFTFarmContract } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n// tokenIds is retrieved dynamically from contracts.\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [values, setValues] = useState({\r\n    address: '',\r\n    tokenId: tokenIds[0],\r\n  })\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  const nftFarmContract = useNFTFarmContract(NftFarm)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(values.address)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        await nftFarmContract.methods\r\n          .transferNft(values.address, values.tokenId)\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue, name } = evt.target\r\n    setValues({ ...values, [name]: inputValue })\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={values.address}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n        {/* <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Token ID')}:</Label>\r\n        <Input\r\n          id=\"tokenId\"\r\n          name=\"tokenId\"\r\n          type=\"number\"\r\n          placeholder={TranslateString(999, 'Enter tokenId')}\r\n          value={values.tokenId}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        /> */}\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          fullWidth\r\n          onClick={handleConfirm}\r\n          disabled={!account || isLoading || !values.address || !values.tokenId}\r\n        >\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState, useContext, useCallback, useEffect } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n  ModalWrapper,\r\n  LogoIcon,\r\n} from '@pancakeswap-libs/uikit'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport { Table } from 'antd'\r\nimport { usePancakeRabbits } from 'hooks/useContract'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { NftFarm, NFT } from 'config/constants/nfts'\r\nimport orderBy from 'lodash/orderBy'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport TransferNftModal from './TransferNftModal'\r\nimport { getNftContract } from '../utils/contracts'\r\n\r\nconst NftTable = () => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: true,\r\n    nftTableData: [],\r\n  })\r\n\r\n  const { account } = useWallet()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const [error, setError] = useState(null)\r\n  const { nftTableData, reInitialize } = useContext(NftProviderContext)\r\n\r\n  const TranslateString = useI18n()\r\n\r\n  const onTransfer = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        nftTableData,\r\n      }))\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }, [nftTableData])\r\n  const nftContract = usePancakeRabbits(NFT)\r\n\r\n  const handleApprove = useCallback(\r\n    async (tokenId) => {\r\n      // console.log('tokenId', tokenId)\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isLoading: true }))\r\n        setRequestedApproval(true)\r\n        // console.log('onApprove', tokenId)\r\n\r\n        // console.log('nftContract', nftContract, NftFarm, tokenId)\r\n        await nftContract.methods\r\n          .approve(NftFarm, tokenId)\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            console.log('receipt')\r\n          })\r\n          .on('error', () => {\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isLoading: false,\r\n          isDataFetched: true,\r\n          nftTableData,\r\n        }))\r\n\r\n        reInitialize()\r\n        setRequestedApproval(false)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    },\r\n    [nftTableData, account, nftContract, reInitialize],\r\n  )\r\n\r\n  const handleSuccess = () => {\r\n    onTransfer()\r\n    reInitialize()\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'NFT Name',\r\n      dataIndex: 'nftName',\r\n      render: (text, record) => {\r\n        return <p style={{ fontWeight: 600, fontSize: '18px' }}>{record.nftName}</p>\r\n      },\r\n    },\r\n    {\r\n      title: 'NFT preview Image',\r\n      dataIndex: 'nftPreviewImage',\r\n      render: (text, record) => {\r\n        return (\r\n          <div>\r\n            <img\r\n              src={`images/nfts/${record.nftPreviewImage}`}\r\n              alt=\"preview\"\r\n              style={{ width: '100px', height: '100px', objectFit: 'cover', borderRadius: '25px' }}\r\n            />\r\n          </div>\r\n        )\r\n      },\r\n    },\r\n    {\r\n      title: 'Token ID',\r\n      dataIndex: 'tokenId',\r\n      key: 'tokenId',\r\n    },\r\n    {\r\n      title: 'NFT Details',\r\n      dataIndex: 'nftDetailLink',\r\n      render: (text, record) => (\r\n        <Button as={Link} to={record.nftDetailLink}>\r\n          View Detail\r\n        </Button>\r\n      ),\r\n      key: 'nftDetailLink',\r\n    },\r\n    {\r\n      title: 'Transfer NFT',\r\n      dataIndex: '',\r\n      render: (text, record) => {\r\n        const nft = {\r\n          name: record.nftName,\r\n          metadata: '',\r\n          description: '',\r\n          originalImage: '',\r\n          previewImage: '',\r\n          fileType: '',\r\n          blurImage: '',\r\n          sortOrder: 1,\r\n          nftId: 0,\r\n          tokenAmount: 0,\r\n          tokenSupply: 0,\r\n          nftFarmContract: '',\r\n          nftContract: '',\r\n          active: false,\r\n        }\r\n        const isApproved = record.isApproved\r\n        const tokenIds = [record.tokenId]\r\n        const [onPresentTransferModal] = ModalWrapper(\r\n          <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n        )\r\n        if (isApproved) {\r\n          return (\r\n            <Button\r\n              fullWidth\r\n              variant=\"primary\"\r\n              mt=\"24px\"\r\n              onClick={() => {\r\n                onPresentTransferModal()\r\n              }}\r\n            >\r\n              {TranslateString(999, 'Transfer')}\r\n            </Button>\r\n          )\r\n        }\r\n        return (\r\n          <Button\r\n            fullWidth\r\n            variant=\"primary\"\r\n            mt=\"24px\"\r\n            onClick={() => {\r\n              handleApprove(parseInt(record.tokenId, 10))\r\n            }}\r\n            disabled={requestedApproval}\r\n          >\r\n            Approve\r\n          </Button>\r\n        )\r\n      },\r\n      key: '',\r\n    },\r\n  ]\r\n\r\n  return <Table columns={columns} dataSource={nftTableData} style={{ marginTop: '25px' }} />\r\n}\r\n\r\nexport default NftTable\r\n","import React, { useContext } from 'react'\r\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport InfoRow from './InfoRow'\r\n\r\nconst NftProgressSimple = () => {\r\n  const TranslateString = useI18n()\r\n  const { balanceOf } = useContext(NftProviderContext)\r\n\r\n  return (\r\n    <Card style={{ backdropFilter: 'blur(3px)', background: 'rgba(39, 38, 44, 0.8)' }}>\r\n      <CardBody>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'My Ticket NFTs')}:</Text>\r\n          <Text>\r\n            <strong>{balanceOf}</strong>\r\n          </Text>\r\n        </InfoRow>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftProgressSimple\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport NftProgress from './NftProgress'\r\nimport NftProgressSimple from './NftProgressSimple'\r\nimport StatusCard from './StatusCard'\r\n\r\nconst StyledNtfInfo = styled.div`\r\n  align-items: start;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`\r\n\r\nconst NftInfo = () => {\r\n  const { canBurnNft } = useContext(NftProviderContext)\r\n\r\n  return <NftProgressSimple />\r\n}\r\n\r\nexport default NftInfo\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport { useHistory } from 'react-router-dom'\r\nimport HowItWorks from './components/HowItWorks'\r\nimport NftList from './components/NftList'\r\nimport NftTable from './components/NftTable'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport NftInfo from './components/NftInfo'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst StyledNotFound = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 64px);\r\n  justify-content: center;\r\n`\r\n\r\nconst CustomButton = styled(Button)`\r\n  margin-right: 20px;\r\n`\r\n\r\nconst GoldenButton = styled(Button)`\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\r\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\r\n  border: 1px solid #a55d07;\r\n  color: rgb(120, 50, 5);\r\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  background-size: 100% 100%;\r\n  background-position: center;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    background-size: 150% 150%;\r\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n    border: 1px solid rgba(165, 93, 7, 0.6);\r\n    color: rgba(120, 50, 5, 0.8);\r\n  }\r\n  &:active {\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  }\r\n`\r\n\r\nconst Nft = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const history = useHistory()\r\n\r\n  if (account) {\r\n    return (\r\n      <NftProvider>\r\n        <Page>\r\n          <StyledHero>\r\n            <Heading as=\"h1\" size=\"xl\" color=\"secondary\" mb=\"24px\">\r\n              My NFT Collections\r\n            </Heading>\r\n            <CustomButton mt=\"24px\">Ticket NFTs</CustomButton>\r\n          </StyledHero>\r\n          <NftInfo />\r\n          <NftTable />\r\n        </Page>\r\n      </NftProvider>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <StyledNotFound>\r\n        <LogoIcon width=\"64px\" mb=\"8px\" />\r\n        <Text mb=\"16px\">{TranslateString(999, 'Empty Collection')}</Text>\r\n      </StyledNotFound>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Nft\r\n"],"sourceRoot":""}